<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MugenInjection.Core</name>
    </assembly>
    <members>
        <member name="T:MugenInjection.Activators.ReflectionActivator">
            <summary>
            Activator use reflection for activate object.
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.ActivatorBase">
            <summary>
            Base class for create and inject values for specified instance.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.DisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IDisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IDisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IDisposableObject.Disposed">
            <summary>
            Occured after disposed current <see cref="T:MugenInjection.Interface.IDisposableObject"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.DisposableObject.Disposed">
            <summary>
            Occured after disposed current <see cref="T:MugenInjection.Interface.IDisposableObject"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IActivator">
            <summary>
            Create new instance of specified service(inject property, field, call method).
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate(System.Reflection.ConstructorInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Create new instance of specified service(inject property, field, call method).
            </summary>
            <param name="constructorInfo">Specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Inject property, method, fields in specified object.
            </summary>
            <param name="instance">Specified object.</param>
            <param name="context">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
        </member>
        <member name="F:MugenInjection.Activators.ActivatorBase.SearchFlag">
            <summary>
            Default search flags.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Reflection.ConstructorInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Create new instance of specified service(inject property, field, call method).
            </summary>
            <param name="constructorInfo">Specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Inject property, method, fields in specified object.
            </summary>
            <param name="instance">Specified object.</param>
            <param name="context">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Create new instance of specified service.
            </summary>
            <param name="constructorInfo">Specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Inject(System.Object)">
            <summary>
            Inject property, method, fields.
            </summary>
            <param name="obj">Specified object.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetBindingFlags">
            <summary>
            Get <see cref="T:System.Reflection.BindingFlags"/> for search.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.IsNeedInject(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Check <see cref="T:System.Reflection.MemberInfo"/> for inject.
            </summary>
            <param name="attributeType">Specified attribute for inject type.</param>
            <param name="memberInfo">Specified <see cref="T:System.Reflection.MemberInfo"/>. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetMethodsForInject(System.Type,System.Type)">
            <summary>
            Get method for inject.
            </summary>
            <param name="service">Specified service type.</param>
            <param name="attributeType">Specified attribute for inject type.</param>
            <returns>Methods for inject.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetFieldsForInject(System.Type,System.Type)">
            <summary>
            Get fields for inject.
            </summary>
            <param name="service">Specified service type.</param>
            <param name="attributeType">Specified attribute for inject type.</param>
            <returns>Fields for inject.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetPropertyForInject(System.Type,System.Type)">
            <summary>
            Get property for inject.
            </summary>
            <param name="service">Specified service type.</param>
            <param name="attributeType">Specified attribute for inject type.</param>
            <returns>Property for inject.</returns>
        </member>
        <member name="P:MugenInjection.Activators.ActivatorBase.CurrentContext">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ReflectionActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Create new instance of specified service.
            </summary>
            <param name="constructorInfo"></param>
        </member>
        <member name="M:MugenInjection.Activators.ReflectionActivator.Inject(System.Object)">
            <summary>
            Inject property, method, fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:MugenInjection.Activators.EmitActivator">
            <summary>
            Activator use emit for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Create new instance of specified service.
            </summary>
            <param name="constructorInfo">Specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Inject(System.Object)">
            <summary>
            Inject property, method, fields.
            </summary>
            <param name="obj">Specified object.</param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.CreateMethodSetter(System.Reflection.MethodInfo)">
            <summary>
            Create method setter delegate.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.LoadMethodArguments(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
            Load method argument in IL.
            </summary>
            <param name="il"></param>
            <param name="targetMethod"></param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.UnboxOrCast(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Unbox or cast specified type.
            </summary>
            <param name="il"></param>
            <param name="type"></param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.MethodCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Specified method call flags.
            </summary>
            <param name="il"></param>
            <param name="method"></param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.CreateSetMethod(System.Reflection.MemberInfo)">
            <summary>
            Create <see cref="T:MugenInjection.Delegates.SetterDelegate"/> for specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified property argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified property argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Interface.IScopeLifecycleContext">
            <summary>
             Represents the context for scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IScopeLifecycleContext.ResolveCurrentService">
            <summary>
            Resolve specified service use a current context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycleContext.Binding">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycleContext.BindingContext">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectionParameter">
            <summary>
            Represents the parameter for inject.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.IsParameterForMember(System.Reflection.MemberInfo)">
            <summary>
            Check type IInjectionParameter.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Can get value for request.
            </summary>
            <param name="memberInfo"></param>
            <param name="parameter"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.GetValue(MugenInjection.Interface.IParameterContext)">
            <summary>
            Get value for request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.MemberType">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.InjectorUtils">
            <summary>
            Helper class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.GetParameters(MugenInjection.Interface.IInjector,System.Reflection.MethodBase,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Get parameters for specified <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <param name="injector"></param>
            <param name="methodBase"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.GetParameter(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Get parameter for specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="injector"></param>
            <param name="memberInfo"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.TypeIsSelfBindable(System.Type)">
            <summary>
            Check type for SelfBindable.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.TypeIsBindable(System.Type,System.Type)">
            <summary>
            Check type for SelfBindable.
            </summary>
            <param name="typeFrom"> </param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.EmptyTypes">
            <summary>
            Contains empty types.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.EmptyType">
            <summary>
            Contains empty type.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithCycleDependencyBehavior``1">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithCycleDependencyBehavior``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithDefaultCycleDependencyBehavior">
            <summary>
            Configure current settings with default <see cref="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithResolveUnregisteredTypeBehavior``1">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithResolveUnregisteredTypeBehavior``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithDefaultResolveUnregisteredTypeBehavior">
            <summary>
            Configure current settings with default <see cref="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.ParseExpression``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Reflection.ConstructorInfo@)">
            <summary>
            Parse expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="constructorInfo"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.AddPropertyParameters(System.Linq.Expressions.MemberInitExpression,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Parse <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="memberInitExpression"></param>
            <param name="parameterBases"></param>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.AddConstructorParameters(System.Linq.Expressions.NewExpression,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Parse <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="newExpression"></param>
            <param name="parameterBases"></param>
        </member>
        <member name="P:MugenInjection.Infrastructure.InjectorUtils.SettingInjector">
            <summary>
            <see cref="T:MugenInjection.Interface.IInjector"/> contains global settings.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingPriority">
            <summary>
            Select binding on the basis of priority.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingPriority.GetPriorityBinding(System.Collections.Generic.IEnumerable{MugenInjection.Interface.IBinding})">
            <summary>
            Select binding with high priority(check duplicate bindings).
            </summary>
            <param name="bindings"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultBindingPriority.GetPriorityBinding(System.Collections.Generic.IEnumerable{MugenInjection.Interface.IBinding})">
            <summary>
            Select binding with high priority(check duplicate bindings).
            </summary>
            <param name="bindings"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IValidBinding.GetBinding">
            <summary>
            Get current binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IValidBinding.IsBindingEquals(MugenInjection.Interface.IBinding)">
            <summary>
            Is bindings equals.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Interface.IBinding">
            <summary>
            Contains information about a service registration.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IHaveSetting">
            <summary>
            Providing specific setting.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.AddSetting(System.String,System.Object)">
            <summary>
            Add specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="obj">Setting parameter</param>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.GetSetting(System.String)">
            <summary>
            Get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.TryGetSetting(System.String,System.Object@)">
            <summary>
            Try get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="result">Setting value.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.IsContain(System.String)">
            <summary>
            Is contain specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBinding.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Can resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IBinding.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ScopeLifecycleBase">
            <summary>
            Lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Priority">
            <summary>
            Priority for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Parameters">
            <summary>
            Parameters for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Service">
            <summary>
            Type specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.#ctor(System.Type,MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="service"></param>
            <param name="settings"></param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Can resolve specified service.
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.GetBinding">
            <summary>
            Get binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.IsBindingEquals(MugenInjection.Interface.IBinding)">
            <summary>
            Equal binding.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IHaveSetting#AddSetting(System.String,System.Object)">
            <summary>
            Add specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="obj">Setting parameter</param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.GetSetting(System.String)">
            <summary>
            Get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IHaveSetting#TryGetSetting(System.String,System.Object@)">
            <summary>
            Try get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="result">Setting value.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IHaveSetting#IsContain(System.String)">
            <summary>
            Is contain specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#ScopeLifecycleBase">
            <summary>
            Lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#Priority">
            <summary>
            Priority for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#Parameters">
            <summary>
            Parameters for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.MugenInjection#Interface#IBinding#Service">
            <summary>
            Type specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified type.
            </summary>
            <param name="typeTo"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToMethod(MugenInjection.Delegates.MethodBindingDelegate)">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <param name="methodBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToConstant(System.Object)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Scope.ManagedScopeLifecycle">
            <summary>
            Class for managed scope lifecycle.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.ScopeLifecycleBase">
            <summary>
            Base class for scope lifecycle.
            </summary>
        </member>
        <member name="F:MugenInjection.Scope.ScopeLifecycleBase.Context">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ResolveCurrentService">
            <summary>
            Resolve current service use context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.NeedDispose">
            <summary>
            Indicating that need dispose object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.GetObjectFromScope">
            <summary>
            Get object from scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ReleaseObjects(System.Boolean)">
            <summary>
            Release all objects in current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.Equals(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.op_Equality(MugenInjection.Scope.ScopeLifecycleBase,MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
            Override operator ==.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.op_Inequality(MugenInjection.Scope.ScopeLifecycleBase,MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
            Override operator !=.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.TryDispose(System.Object)">
            <summary>
            Try dispose specified object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.GetObjectFromScope">
            <summary>
            Get object from scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Release all objects in current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorSettings">
            <summary>
            Contains configuration options for specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorSettings.Clone">
            <summary>
            Clone current settings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ThrowErrorForNullableBinding">
            <summary>
            Throw error if binding provider return null result.(Default is true)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.UseParentForResolve">
            <summary>
            If the binding is not found use for the activation parent container(see example)(Default is true).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.AttributeForInject">
            <summary>
            Attribute specifies where to use injection.(Default <see cref="T:MugenInjection.Attributes.InjectAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultActivator">
            <summary>
            Specified type for default IActivator.(Default <see cref="T:MugenInjection.Activators.ExpressionActivator"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolver">
            <summary>
            Specified type for default IConstructorResolver.(Default <see cref="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolver"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ConstructorResolverForSelfBindable">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/> for self bindable types.(Default <see cref="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolver"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ActivatorForSelfBindable">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IActivator"/> for self bindable types.(Default <see cref="T:MugenInjection.Activators.ExpressionActivator"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ActivatorForInject">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IActivator"/> for inject property, method, fields in specified object.(Default <see cref="T:MugenInjection.Activators.ExpressionActivator"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultBindingPriority">
            <summary>
             Specified <see cref="T:MugenInjection.Interface.IBindingPriority"/> for bindings.(Default <see cref="P:MugenInjection.Interface.IInjectorSettings.DefaultBindingPriority"/>)
            </summary>
        </member>
        <member name="T:MugenInjection.Core.InjectorBase">
            <summary>
            The base implementation of an <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjector">
            <summary>
            Represents the ioc container, that can create objects of all kinds.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorResolver">
            <summary>
            Provides a path to resolve instances.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.Inject(System.Object,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Inject property, method, fields in specified object.
            </summary>
            <param name="instance">Specified object.</param>
            <param name="parameters"> Parameters for service.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.Resolve(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve specified service.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.CanResolve(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for resolve specified service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve all specified service.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.ResolveAll(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve all specified service with specified conditions.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member">Type when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified service.</returns>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorBinder">
            <summary>
            Provides a path to register bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create <see cref="T:MugenInjection.Interface.IBindingContext"/> for current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Add specified binding.
            </summary>
            <param name="binding">Specified binding.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Remove specified binding.
            </summary>
            <param name="binding">Specified binding.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.GetBindings(System.Type)">
            <summary>
            Get all binding for specified service service.
            </summary>
            <param name="service">Specified service.</param>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorBinder.Settings">
            <summary>
            Contains configuration options.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorBinder.Bindings">
            <summary>
            Contain all bindings for current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.GetRoot">
            <summary>
            Get root <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.GetParent">
            <summary>
            Get parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.CreateChild">
            <summary>
            Create child injector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.CreateChild(MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ModuleIsLoaded(System.String)">
            <summary>
            Check module load.
            </summary>
            <param name="name">Module name.</param>
            <returns>Indicate module is load.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ModuleIsLoaded(System.Type)">
            <summary>
            Check module load.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
            <returns>Indicate module is load.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Load(MugenInjection.Core.InjectorModule)">
            <summary>
            Load specified module.
            </summary>
            <param name="module">Specified module.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Load(System.Collections.Generic.IEnumerable{MugenInjection.Core.InjectorModule})">
            <summary>
            Load specified modules.
            </summary>
            <param name="modules">Specified modules.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Unload(System.String)">
            <summary>
            Unload specified module.
            </summary>
            <param name="name">Module name.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Unload(System.Type)">
            <summary>
            Unload specified module.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Release(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null.</param>
            <param name="parameters">Specified binding parameters. </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ReleaseAll(System.Type,System.Boolean)">
            <summary>
            Release all specified service in scope.
            </summary>
            <param name="service">Service for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Modules">
            <summary>
            All modules for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.ChildInjectors">
            <summary>
            Collection child <see cref="T:MugenInjection.Interface.IInjector"/>s.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.InjectorBase._childInjectors">
            <summary>
            Collection child injectors.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.InjectorBase._injectorModules">
            <summary>
            Injector modules.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.InjectorBase._selfBindableCache">
            <summary>
            Self bindable cache.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.InjectorBase._parent">
            <summary>
            Parent injector.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.#ctor(MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Core.InjectorBase"/>.
            </summary>
            <param name="settings"><see cref="T:MugenInjection.Interface.IInjectorSettings"/> for current <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Core.InjectorBase"/>.
            </summary>
            <param name="parent">Parenta <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="settings"><see cref="T:MugenInjection.Interface.IInjectorSettings"/> for current <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CheckResult(System.Type,System.Object)">
            <summary>
            Check output result.
            </summary>
            <param name="type"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.TryResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Try resolve use custom behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Can resolve specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext"></param>
            <param name="findInParent"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindLocalBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Find local binding for specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindInParent(MugenInjection.Infrastructure.BindingContext)">
            <summary>
            Find <see cref="T:MugenInjection.Interface.IBinding"/> from parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="bindingContext"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindModule(System.String)">
            <summary>
            Find specified module.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindModule(System.Type)">
            <summary>
            Find specified module.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreatSelfBindable(System.Type)">
            <summary>
            Create self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetParameters(System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Cast or create parameters <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChildInjector(MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create child <see cref="T:MugenInjection.Interface.IInjector"/> with specified <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.
            </summary>
            <param name="injectorSettings">Settings for creating <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Inject(System.Object,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Inject property, method, fields in specified object.
            </summary>
            <param name="instance">Specified object.</param>
            <param name="parameters"> Parameters for service.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Resolve(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve specified service.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CanResolve(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for resolve specified service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve all specified service.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ResolveAll(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve all specified service with specified conditions.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member">Type when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create <see cref="T:MugenInjection.Interface.IBindingContext"/> for current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Add specified binding.
            </summary>
            <param name="binding">Specified binding.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Remove specified binding.
            </summary>
            <param name="binding">Specified binding.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetBindings(System.Type)">
            <summary>
            Get all binding for specified service service.
            </summary>
            <param name="service">Specified service.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetRoot">
            <summary>
            Get root <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetParent">
            <summary>
            Get parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChild">
            <summary>
            Create child injector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChild(MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ModuleIsLoaded(System.String)">
            <summary>
            Check module load.
            </summary>
            <param name="name">Module name.</param>
            <returns>Indicate module is load.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ModuleIsLoaded(System.Type)">
            <summary>
            Check module load.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
            <returns>Indicate module is load.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Load(MugenInjection.Core.InjectorModule)">
            <summary>
            Load specified module.
            </summary>
            <param name="module">Specified module.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Load(System.Collections.Generic.IEnumerable{MugenInjection.Core.InjectorModule})">
            <summary>
            Load specified modules.
            </summary>
            <param name="modules">Specified modules.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Unload(System.String)">
            <summary>
            Unload specified module.
            </summary>
            <param name="name">Module name.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Unload(System.Type)">
            <summary>
            Unload specified module.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Release(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null.</param>
            <param name="parameters">Specified binding parameters. </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ReleaseAll(System.Type,System.Boolean)">
            <summary>
            Release all specified service in scope.
            </summary>
            <param name="service">Service for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Settings">
            <summary>
            Contains configuration options.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Bindings">
            <summary>
            Contain all bindings for current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Modules">
            <summary>
            All modules for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.ChildInjectors">
            <summary>
            Collection child <see cref="T:MugenInjection.Interface.IInjector"/>s.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.NamedParameterAttribute">
            <summary>
            Attribute that indicates where need inject specified service with specified binding name.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.ResolverAttribute">
            <summary>
            Base class for resolve attribute.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.ResolverAttribute.GetResolveValue(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Resolve current value.
            </summary>
            <param name="injector"></param>
            <param name="service"> </param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.NamedParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.GetResolveValue(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Resolve current value.
            </summary>
            <param name="injector"></param>
            <param name="service"> </param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseReflectionActivator">
            <summary>
            Use reflection activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseEmitActivator">
            <summary>
            Use emit activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseExpressionActivator">
            <summary>
            Use expression activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="activator"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomActivator(MugenInjection.Delegates.FuncDelegate{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomConstructorResolver(MugenInjection.Delegates.FuncDelegate{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Parameters.InjectionParameterBase">
            <summary>
            Base class for all parameters.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">Parameter type.</param>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">Parameter type.</param>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">Parameter type.</param>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="parameterDelegate">Parameter delegate.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.Equals(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.IsParameterForMember(System.Reflection.MemberInfo)">
            <summary>
            Check type IInjectionParameter.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Can get value for request.
            </summary>
            <param name="memberInfo"></param>
            <param name="parameter"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.GetValue(MugenInjection.Interface.IParameterContext)">
            <summary>
            Get value for request
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.IsAssignableParameter(System.Type)">
            <summary>
            Is assignable type for current parameter.
            </summary>
            <param name="parameter">Type to check.</param>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.ParameterType">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.ParameterDelegate">
            <summary>
            Delegate for create parameter.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.MemberType">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.OptionalParameterAttribute">
            <summary>
            Attribute that indicates where need inject specified service if service can't resolve using default value.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.OptionalParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.OptionalParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.GetResolveValue(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Resolve current value.
            </summary>
            <param name="injector"></param>
            <param name="service"> </param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.#ctor(System.Type,MugenInjection.Interface.IInjectorSettings,System.Object)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="service"></param>
            <param name="settings"></param>
            <param name="value"> </param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``1">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``2">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``3">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``4">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``5">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetStandardPriority">
            <summary>
             Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Parameters.FieldParameter`1">
            <summary>
            Class for field parameter.
            </summary>
            <typeparam name="TType">Parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.FieldParameter">
            <summary>
            Class for field parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Can get value for request.
            </summary>
            <param name="memberInfo"></param>
            <param name="parameter"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter`1.#ctor(System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="T:MugenInjection.Interface.IManagedScope">
            <summary>
            Managed scope.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IManagedScope.AlwaysTryDisposeObject">
            <summary>
            With the dispose of scope will try dispose all objects in scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ManagedScope"/> class.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ManagedScope.AlwaysTryDisposeObject">
            <summary>
            With the dispose of scope will try dispose all objects in scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingContext">
            <summary>
            Context for binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingContext.UpdateParameters(System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Update <see cref="P:MugenInjection.Interface.IBindingContext.Parameters"/>.
            </summary>
            <param name="parameters">Specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Service">
            <summary>
            Type specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.TypeInto">
            <summary>
            Type into injected specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.ParameterInfo">
            <summary>
            Gets the <see cref="P:MugenInjection.Interface.IBindingContext.ParameterInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Injector">
            <summary>
            <see cref="T:MugenInjection.Interface.IInjector"/> for activate specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.CallInjector">
            <summary>
            <see cref="T:MugenInjection.Interface.IInjector"/> who call service activated.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Parameters">
            <summary>
            Parameters for specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.SpecialParameters">
            <summary>
            Special parameters for current context.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.UpdateParameters(System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Update <see cref="P:MugenInjection.Interface.IBindingContext.Parameters"/>.
            </summary>
            <param name="parameters">Specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Service">
            <summary>
            Type specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.TypeInto">
            <summary>
            Type into injected specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.ParameterInfo">
            <summary>
            Gets the <see cref="P:MugenInjection.Interface.IBindingContext.ParameterInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Injector">
            <summary>
            <see cref="T:MugenInjection.Interface.IInjector"/> for activate specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.CallInjector">
            <summary>
            <see cref="T:MugenInjection.Interface.IInjector"/> who call service activated.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Parameters">
            <summary>
            Parameters for specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.SpecialParameters">
            <summary>
            Special parameters for current context.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.MethodBinding">
            <summary>
            Represent the method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.BindingBase">
            <summary>
            Base class for binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.#ctor(System.Type,MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="service">Specified service type.</param>
            <param name="dependencyLifecycle">Specified <see cref="P:MugenInjection.Bindings.BindingBase.ScopeLifecycleBase"/>.</param>
            <param name="parameters">Specified parameters.</param>
            <param name="canResolve">Specified condition for can resolve.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Can resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.BeginDetectCycle(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Begin detect cycle dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.EndDetectCycle">
            <summary>
            End detect cycle dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.MergeParameter(System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Merge parameters in current bindings.
            </summary>
            <param name="userParameter"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.IsAssignableService(System.Type)">
            <summary>
            Is assignable type for current binding.
            </summary>
            <param name="checkType"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>Resolve service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnActivating(MugenInjection.Interface.IBindingContext)">
            <summary>
            On activating <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="bindingContext"></param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnActivated(System.Object)">
            <summary>
            On activated <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnDisposed">
            <summary>
            On disposed <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.MugenInjection#Interface#IValidBinding#GetBinding">
            <summary>
            Get current binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.MugenInjection#Interface#IValidBinding#IsBindingEquals(MugenInjection.Interface.IBinding)">
            <summary>
            Is bindings equals.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.AddSetting(System.String,System.Object)">
            <summary>
            Add specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="obj">Setting parameter</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.GetSetting(System.String)">
            <summary>
            Get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.TryGetSetting(System.String,System.Object@)">
            <summary>
            Try get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="result">Setting value.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.IsContain(System.String)">
            <summary>
            Is contain specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.TryDisposeObject">
            <summary>
            Try dispose object when dispose binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ScopeLifecycleBase">
            <summary>
            Lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Priority">
            <summary>
            Priority for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Parameters">
            <summary>
            Parameters for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Service">
            <summary>
            Type service.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.MethodBinding._method">
            <summary>
            Specified method for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.#ctor(MugenInjection.Delegates.MethodBindingDelegate,System.Type,MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.MethodBinding"/>.
            </summary>
            <param name="method">Specified method for activate object.</param>
            <param name="service">Specified service type.</param>
            <param name="dependencyLifecycle">Specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/></param>
            <param name="parameters">Specified parameters.</param>
            <param name="canResolve">Specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>Resolve service.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To``1">
            <summary>
            Indicates that the service should be bound to the specified type <see cref="!:T"/>.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToConstant(`0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified type.
            </summary>
            <param name="typeTo"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.#ctor(System.Type,MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create <see cref="T:MugenInjection.Bindings.Builders.BindingBuilder`1"/>
            </summary>
            <param name="service"></param>
            <param name="settings"></param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.GetBinding">
            <summary>
            Get binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.IsBindingEquals(MugenInjection.Interface.IBinding)">
            <summary>
            Equal binding.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Can resolve specified service.
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.ToMethod(MugenInjection.Delegates.MethodBindingDelegate)">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <param name="methodBinding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.ToConstant(System.Object)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.To``1">
            <summary>
            Indicates that the service should be bound to the specified type <see cref="!:T"/>.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.ToConstant(`0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified type.
            </summary>
            <param name="typeTo"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.To(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IHaveSetting#AddSetting(System.String,System.Object)">
            <summary>
            Add specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="obj">Setting parameter</param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IHaveSetting#GetSetting(System.String)">
            <summary>
            Get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IHaveSetting#TryGetSetting(System.String,System.Object@)">
            <summary>
            Try get specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <param name="result">Setting value.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IHaveSetting#IsContain(System.String)">
            <summary>
            Is contain specified setting.
            </summary>
            <param name="name">Setting name.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#ScopeLifecycleBase">
            <summary>
            Lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#Priority">
            <summary>
            Priority for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#Parameters">
            <summary>
            Parameters for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`1.MugenInjection#Interface#IBinding#Service">
            <summary>
            Type specified service.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.InjectAttribute">
            <summary>
            Attribute that indicates where need inject specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Bindings.ConstantBinding">
            <summary>
            Represent the constant binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.ConstantBinding._value">
            <summary>
            Const value.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.#ctor(System.Object,System.Type,MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.ConstantBinding"/>.
            </summary>
            <param name="value">Constant value.</param>
            <param name="service">Specified service type.</param>
            <param name="dependencyLifecycle">Specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/></param>
            <param name="parameters">Specified parameters.</param>
            <param name="canResolve">Specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>Resolve service.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.#ctor(System.Type,MugenInjection.Interface.IInjectorSettings,System.Type)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="service"></param>
            <param name="settings"></param>
            <param name="typeTo"> </param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``1">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``2">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``3">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``4">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``5">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetStandardPriority">
            <summary>
             Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="dependencyLifecycle"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseReflectionActivator">
            <summary>
            Use reflection activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseEmitActivator">
            <summary>
            Use emit activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseExpressionActivator">
            <summary>
            Use expression activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="activator"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomActivator(MugenInjection.Delegates.FuncDelegate{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomConstructorResolver(MugenInjection.Delegates.FuncDelegate{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.#ctor(MugenInjection.Interface.IBinding,System.Type,MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="customBinding"> </param>
            <param name="service"></param>
            <param name="settings"></param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.#ctor(MugenInjection.Delegates.MethodBindingDelegate,System.Type,MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="methodBindingDelegate"> </param>
            <param name="service"></param>
            <param name="settings"></param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="dependencyLifecycle"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Infrastructure.ResolveContext">
            <summary>
            Context for resolve service.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ResolveContext.Resolve``1">
            <summary>
            Resolve current service <see cref="!:T"/> use Ioc container.
            </summary>
            <typeparam name="T">Specified service <see cref="!:T"/></typeparam>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Scope.CustomScopeLifecycle">
            <summary>
            Class for custom lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.#ctor(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Scope.CustomScopeLifecycle"/>.
            </summary>
            <param name="customScopeDelegate"></param>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.GetObjectFromScope">
            <summary>
            Get object from current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="T:MugenInjection.Bindings.TypeBinding">
            <summary>
            Represent the type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.#ctor(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver,System.Type,MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.MethodBinding"/>.
            </summary>
            <param name="typeTo">Specified type for activate.</param>
            <param name="constructorResolver">Specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="service">Specified service type.</param>
            <param name="dependencyLifecycle">Specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>.</param>
            <param name="parameters">Specified parameters.</param>
            <param name="canResolve">Specified condition for can resolve method.</param>
            <param name="activator">Specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>Resolve service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.MergeGeneric(System.Type)">
            <summary>
            Merge generic type.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.CreateSelfBinding(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Create self bindable <see cref="T:MugenInjection.Bindings.TypeBinding"/>.
            </summary>
            <param name="service"></param>
            <param name="activator"></param>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.Activator">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IActivator"/> for current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.ConstructorResolver">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/> for current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.TypeTo">
            <summary>
            Specified type for activate.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.UnitOfWorkScopeLifecycle">
            <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means that each injector will contain one unit of service.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.GetObjectFromScope">
            <summary>
            Get object from current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Release object in current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.BindingCollection">
            <summary>
            Collection for <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.Add(MugenInjection.Interface.IBinding)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.Remove(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:MugenInjection.Core.DefaultInjectorSetting">
            <summary>
            Default <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DefaultInjectorSetting.#ctor">
            <summary>
            Create new instance <see cref="T:MugenInjection.Core.DefaultInjectorSetting"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DefaultInjectorSetting.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ThrowErrorForNullableBinding">
            <summary>
            Throw error if binding provider return null result.(Default is true)
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.UseParentForResolve">
            <summary>
            If the binding is not found use for the activation parent container(see example)(Default is true).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.AttributeForInject">
            <summary>
            Attribute specifies where to use injection.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultActivator">
            <summary>
            Specified type for default <see cref="T:MugenInjection.Interface.IActivator"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultConstructorResolver">
            <summary>
            Specified type for default IConstructorResolver.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ActivatorForInject">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IActivator"/> for inject property, method, fields in specified object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultBindingPriority">
            <summary>
             Specified <see cref="T:MugenInjection.Interface.IBindingPriority"/> for bindings.(Default <see cref="P:MugenInjection.Interface.IInjectorSettings.DefaultBindingPriority"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ActivatorForSelfBindable">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IActivator"/> for self bindable types.(Default <see cref="T:MugenInjection.Activators.EmitActivator"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ConstructorResolverForSelfBindable">
            <summary>
            Specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/> for self bindable types.(Default <see cref="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolver"/>)
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.TransientScopeLifecycle">
            <summary>
             Class for transient scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope">
            <summary>
            Get object from current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Interface.IConstructorResolver">
            <summary>
            Select constructor for specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IConstructorResolver.Resolve(System.Type,MugenInjection.Interface.IInjectorSettings,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Select constructor for specified service.
            </summary>
            <param name="service"></param>
            <param name="settings"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IConstructorResolver.SetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Set constructor info for specified service.
            </summary>
            <param name="constructorInfo"></param>
        </member>
        <member name="T:MugenInjection.Infrastructure.DefaultConstructorResolver">
            <summary>
            Select constructor for specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultConstructorResolver.Resolve(System.Type,MugenInjection.Interface.IInjectorSettings,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Select constructor for specified service.
            </summary>
            <param name="service"></param>
            <param name="settings"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultConstructorResolver.SetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Set constructor info for specified service.
            </summary>
            <param name="constructorInfo"></param>
        </member>
        <member name="T:MugenInjection.InjectorExtension">
            <summary>
            Extension method.
            </summary>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <param name="name"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <param name="result">Result object.  </param>
            <param name="name">Specified binding name. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <param name="name">Specified binding name. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <param name="name">Specified binding name. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="result">Result objects. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="result">Result objects. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="result">Result objects. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">Result objects. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects.</param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="service">Specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``1(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``2(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Removes any existing bindings for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="parameters">Specified parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Unregisters all bindings for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="parameters">Specified parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="specialParameters">Specified parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service. Default, don't check current type for selfbindable, and not find in parent.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service. Default, don't check current type for selfbindable.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service. Default, don't check current type for selfbindable, and not find in parent.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service. Default, don't check current type for selfbindable.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="name">Specified binding name. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="name">Specified binding name. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters"> </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="name">Specified binding name. </param>
            <param name="specialParameters"> </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for release specified service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="name">Specified binding name.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.String,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="name">Specified binding name.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">Specified binding name.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters. </param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">Specified parameters.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateManagedScope(MugenInjection.Interface.IInjectorResolver,System.Boolean)">
            <summary>
            Creating new managed scope, and use it for creating new objects.
            </summary>
            <param name="injectorResolver">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>. </param>
            <param name="tryDisposeObjects">True - with the dispose of scope will try dispose all objects in scope.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateManagedScope(MugenInjection.Interface.IInjectorResolver)">
            <summary>
             Creating new managed scope, and use it for creating new objects. Default tryDisposeObjects is false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.SetManagedScope(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IManagedScope)">
            <summary>
            Set specified <see cref="T:MugenInjection.Interface.IManagedScope"/> for creating new object.
            For creating new <see cref="T:MugenInjection.Interface.IManagedScope"/> using method <see cref="M:MugenInjection.InjectorExtension.CreateManagedScope(MugenInjection.Interface.IInjectorResolver,System.Boolean)"/>.
            </summary>
            <param name="injectorResolver">Specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>. </param>
            <param name="managedScope">Specified <see cref="T:MugenInjection.Interface.IManagedScope"/>.</param>
        </member>
        <member name="T:MugenInjection.Parameters.PropertyParameter`1">
            <summary>
            Class for property parameter.
            </summary>
            <typeparam name="TType">Parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.PropertyParameter">
            <summary>
            Class for property parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Can get value for request.
            </summary>
            <param name="memberInfo"></param>
            <param name="parameter"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter`1.#ctor(System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="T:MugenInjection.Infrastructure.PriorityBinding">
            <summary>
            Binding priority enum.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.Standard">
            <summary>
            Standard priority.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.High">
            <summary>
            High prioriy.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IParameterContext">
            <summary>
            Parameter context.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IParameterContext.InjectedType">
            <summary>
            Specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IParameterContext.Injector">
            <summary>
            Current injector.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.SpecialParameterKeys">
            <summary>
            Contain constant key for special parameter.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.NamedBindingParameter">
            <summary>
            Key for named binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.TryDisposeObjectSetting">
            <summary>
            Key try dispose object in bindings.
            </summary>
        </member>
        <member name="T:MugenInjection.InjectorExtensionUtils">
            <summary>
            Extension for <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector"></param>
            <param name="service"></param>
            <param name="member"> </param>
            <param name="specialParameters"></param>
            <param name="parameters"></param> 
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Get``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"> Type when injected specified service.</param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters"> </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">Specified service type.</param>
            <param name="member"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"> </param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"> Type when injected specified service.</param>
            <param name="expression">Specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member"> Type where injected specified service.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">Specified service type.</param>
            <param name="member">Type where injected specified service. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">Specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="all"> </param>
            <param name="parameters"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/> (for into type).
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="all"> </param>
            <param name="parameters"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">Specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``1(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``2(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">Specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind``1(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Removes any existing bindings for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="parameters">Specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="parameters">Specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">Specified service type.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings for the specified service, with specific condition.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">Specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="parameters">Specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">Specified <see cref="T:MugenInjection.Interface.IInjector"/>. </param>
            <param name="service">Service for resolve.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters">Special parameters for resolve specified service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable"> </param>
            <param name="parameters"> </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service in scope.
            </summary>
            <param name="injector"> </param>
            <param name="service">Service for release.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameters">Specified binding parameters. </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:MugenInjection.Scope.DefaultScopeLifecycleContext">
            <summary>
            Default <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/> context.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.DefaultScopeLifecycleContext.SetContext(MugenInjection.Bindings.BindingBase,MugenInjection.Interface.IBindingContext)">
            <summary>
            Set current context.
            </summary>
            <param name="bindingBase"></param>
            <param name="bindingContext"></param>
        </member>
        <member name="M:MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService">
            <summary>
            Resolve specified service use a current context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.BindingBase">
            <summary>
            Current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.Binding">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.BindingContext">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Parameters.MethodParameter`1">
            <summary>
            Class for method parameter.
            </summary>
            <typeparam name="TType">Parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.MethodParameter">
            <summary>
            Class for method parameter.
            </summary>
        </member>
        <member name="F:MugenInjection.Parameters.MethodParameter._methodName">
            <summary>
            Method name.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">Method name.</param>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type. </param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">Method name.</param>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type. </param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Can get value for request.
            </summary>
            <param name="memberInfo"></param>
            <param name="parameter"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter`1"/>.
            </summary>
            <param name="methodName">Method name.</param>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter`1.#ctor(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter`1"/>.
            </summary>
            <param name="methodName">Method name.</param>
            <param name="name">Parameter name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="T:MugenInjection.MugenInjector">
            <summary>
            Container ioc.
            </summary>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="modules">Specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">Specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">Specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">Specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.CreateChildInjector(MugenInjection.Interface.IInjectorSettings)">
            <summary>
            Create child <see cref="T:MugenInjection.Interface.IInjector"/> with specified <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.
            </summary>
            <param name="injectorSettings">Settings for creating <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Exceptions.ConflictBindingException">
            <summary>
            The exception that is thrown when find duplicate bindings.
            </summary>
        </member>
        <member name="T:MugenInjection.Delegates.CanResolveBindingDelegate">
            <summary>
            
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Core.InjectorModule">
            <summary>
            Base class for module which can load in <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.InjectorModule._bindings">
            <summary>
            Module bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind(System.Type)">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="service">Specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``1">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``2">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">Specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.GetAllBindings">
            <summary>
            Get all bindings in current module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.GetName">
            <summary>
            Get current module name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Load">
            <summary>
            Load bindings in current module. 
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorModule.Injector">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.ExpressionActivator">
            <summary>
            Activator use <see cref="T:System.Linq.Expressions.Expression"/> for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Create new instance of specified service.
            </summary>
            <param name="constructorInfo">Specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior">
            <summary>
            The behavior of the resolve for circular dependencies.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve circular dependencies.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ParameterContext.InjectedType">
            <summary>
            Specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ParameterContext.Injector">
            <summary>
            Current injector.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.ThreadScopeLifecycle">
            <summary>
            Class for thread scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.GetObjectFromScope">
            <summary>
            Get object from current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Release object in current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.SingletonScopeLifecycle">
            <summary>
            Class for singleton scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.GetObjectFromScope">
            <summary>
            Get object from current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Release object in current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Parameters.ConstructorParameter`1">
            <summary>
            Class for constructor parameter.
            </summary>
            <typeparam name="TType">Parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.ConstructorParameter">
            <summary>
            Class for constructor parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type. </param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="type">Parameter type. </param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter`1.#ctor(System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior">
            <summary>
            The behavior of the resolve for unregistered type.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve unregistered type.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Bindings.CustomBinding">
            <summary>
            Represent the custom binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.CustomBinding._customBinding">
            <summary>
            Custom binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.#ctor(MugenInjection.Interface.IBinding,System.Type,MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.CustomBinding"/>.
            </summary>
            <param name="customBinding">Specified custom binding.</param>
            <param name="service">Specified service type.</param>
            <param name="dependencyLifecycle">Specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/></param>
            <param name="parameters">Specified parameters.</param>
            <param name="canResolve">Specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Can resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve specified service.
            </summary>
            <param name="bindingContext">Specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>Resolve service.</returns>
        </member>
    </members>
</doc>
