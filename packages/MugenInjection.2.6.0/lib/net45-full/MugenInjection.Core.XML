<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MugenInjection.Core</name>
    </assembly>
    <members>
        <member name="T:MugenInjection.Activators.ExpressionActivator">
            <summary>
            Activator use <see cref="T:System.Linq.Expressions.Expression"/> for activate object.
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.ActivatorBase">
            <summary>
            Base class for create and inject values for specified instance.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.DisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IDisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IDisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IDisposableObject.Disposed">
            <summary>
            Occured after disposed current <see cref="T:MugenInjection.Interface.IDisposableObject"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.DisposableObject.Disposed">
            <summary>
            Occured after disposed current <see cref="T:MugenInjection.Interface.IDisposableObject"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IActivator">
            <summary>
            Create new instance of specified service(inject property, field, call method).
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate(System.Reflection.ConstructorInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Creates new instance of specified service(inject property, field, call method).
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate(System.Object@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object for the value <see cref="T:System.Type"/>.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
        </member>
        <member name="F:MugenInjection.Activators.ActivatorBase.SearchFlag">
            <summary>
            Default search flags.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Reflection.ConstructorInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Creates new instance of specified service(inject property, field, call method).
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Object@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object for the value <see cref="T:System.Type"/>.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Creates new instance of specified service.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Inject(System.Type,System.Object@)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="targetType">The specified target <see cref="T:System.Type"/>.</param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetBindingFlags">
            <summary>
            Gets the <see cref="T:System.Reflection.BindingFlags"/> for search.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.IsNeedInject(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Checks the specified <see cref="T:System.Reflection.MemberInfo"/> for inject.
            </summary>
            <param name="attributeType">The specified attribute for inject type.</param>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/>. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetMethodsForInject(System.Type,System.Type)">
            <summary>
            Gets a methods for inject.
            </summary>
            <param name="service">The specified service type.</param>
            <param name="attributeType">The specified attribute for inject type.</param>
            <returns>A methods for inject.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetFieldsForInject(System.Type,System.Type)">
            <summary>
            Gets fields for inject.
            </summary>
            <param name="service">The specified service type.</param>
            <param name="attributeType">The specified attribute for inject type.</param>
            <returns>A fields for inject.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetPropertyForInject(System.Type,System.Type)">
            <summary>
            Gets a properties for inject.
            </summary>
            <param name="service">The specified service type.</param>
            <param name="attributeType">The specified attribute for inject type.</param>
            <returns>A properties for inject.</returns>
        </member>
        <member name="P:MugenInjection.Activators.ActivatorBase.CurrentContext">
            <summary>
            A current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Activators.ActivatorBase.Binding">
            <summary>
            A current <see cref="T:MugenInjection.Interface.IBinding"/>. 
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Creates new instance of specified service.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Inject(System.Type,System.Object@)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="targetType">The specified target <see cref="T:System.Type"/>.</param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ResolveContext">
            <summary>
            Context for resolve service.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ResolveContext.Resolve``1">
            <summary>
            Resolve current service <see cref="!:T"/> use Ioc container.
            </summary>
            <typeparam name="T">The specified service <see cref="!:T"/></typeparam>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.InjectorExtension">
            <summary>
            Extension method for <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="name"> </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <param name="name">The specified binding name. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <param name="name">The specified binding name. </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <param name="name">The specified binding name. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind(MugenInjection.Interface.IInjector,System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="services">The specified service <see cref="T:System.Type"/>(s).</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``1(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``3(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``4(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild(MugenInjection.Interface.IInjector,System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="services">The specified service <see cref="T:System.Type"/>(s).</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``1(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``3(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``4(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindTo``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindToWithManualBuild``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type)">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector)">
            <summary>
            Removes any existing bindings for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Unregisters all bindings for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="parameters">The specified parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="specialParameters">The specified parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.String,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved. Default, don't check current type for selfbindable, and not find in parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved. Default, don't check current type for selfbindable.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved. Default, don't check current type for selfbindable, and not find in parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved. Default, don't check current type for selfbindable.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="name">The specified binding name. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="name">The specified binding name. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters"> </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="name">The specified binding name. </param>
            <param name="specialParameters"> </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for release specified service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null.</param>
            <param name="parameters">The specified binding parameters. </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="name">The specified binding name.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.String,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="name">The specified binding name.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.String,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="name">The specified binding name.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateManagedScope(MugenInjection.Interface.IInjectorResolver,System.Boolean)">
            <summary>
            Creating new managed scope, and use it for creating new objects.
            </summary>
            <param name="injectorResolver">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>. </param>
            <param name="tryDisposeObjects">True - with the dispose of scope will try dispose all objects in scope.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateManagedScope(MugenInjection.Interface.IInjectorResolver)">
            <summary>
             Creating new managed scope, and use it for creating new objects. Default tryDisposeObjects is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.SetManagedScope(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IManagedScope)">
            <summary>
            Set specified <see cref="T:MugenInjection.Interface.IManagedScope"/> for creating new object.
            For creating new <see cref="T:MugenInjection.Interface.IManagedScope"/> using method <see cref="M:MugenInjection.InjectorExtension.CreateManagedScope(MugenInjection.Interface.IInjectorResolver,System.Boolean)"/>.
            </summary>
            <param name="injectorResolver">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>. </param>
            <param name="managedScope">The specified <see cref="T:MugenInjection.Interface.IManagedScope"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetCurrentManagedScope(MugenInjection.Interface.IInjectorResolver)">
            <summary>
            Get the currently active <see cref="T:MugenInjection.Interface.IManagedScope"/>.
            </summary>
            <param name="injectorResolver">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateLocalManagedScope(MugenInjection.Interface.IInjectorBinder,System.Boolean)">
            <summary>
            Creating new local managed scope, and use it for creating new objects.
            </summary>
            <param name="injectorBinder">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>. </param>
            <param name="tryDisposeObjects">True - with the dispose of scope will try dispose all objects in scope.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateLocalManagedScope(MugenInjection.Interface.IInjectorBinder)">
            <summary>
             Creating new local managed scope, and use it for creating new objects. Default tryDisposeObjects is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.SetLocalManagedScope(MugenInjection.Interface.IInjectorBinder,MugenInjection.Interface.IManagedScope)">
            <summary>
            Set specified local <see cref="T:MugenInjection.Interface.IManagedScope"/> for creating new object.
            For creating new <see cref="T:MugenInjection.Interface.IManagedScope"/> using method <see cref="M:MugenInjection.InjectorExtension.CreateLocalManagedScope(MugenInjection.Interface.IInjectorBinder,System.Boolean)"/>.
            </summary>
            <param name="injectorBinder">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>. </param>
            <param name="managedScope">The specified <see cref="T:MugenInjection.Interface.IManagedScope"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetCurrentLocalManagedScope(MugenInjection.Interface.IInjectorBinder)">
            <summary>
            Get the currently active local <see cref="T:MugenInjection.Interface.IManagedScope"/>.
            </summary>
            <param name="injectorBinder">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Create a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Boolean,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create a child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="cloneComponents">Specifies whether to clone the components from the parent.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>Child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Load``1(MugenInjection.Interface.IInjector)">
            <summary>
            Creates a new instance of the module and loads it into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>  </param>
            <param name="{T}">The type of the module.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unload``1(MugenInjection.Interface.IInjector)">
            <summary>
            Unloads the module with the specified <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>  </param>
            <typeparam name="T">Module <see cref="T:System.Type"/>.</typeparam>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Load(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{MugenInjection.Core.InjectorModule})">
            <summary>
            Loads the module(s) into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>  </param>
            <param name="modules">The specified modules.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.LoadModules(MugenInjection.Interface.IInjector,System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Inject(MugenInjection.Interface.IInjector,System.Object,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Inject property, method, fields in specified object.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="target">The specified object for inject.</param>
            <param name="parameters"> The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="T:MugenInjection.ExpressionReflectionExtension">
            <summary>
            A class for use with reflection, provides quick access to the members of an object use <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.ReflectionExtension">
            <summary>
            A class for use with reflection, provides quick access to the members of an object use <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetCreateInstanceDelegate(System.Reflection.ConstructorInfo)">
            <summary>
            Get method for creating an object.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.CreateInstance(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Invokes the constructor reflected by the instance that has the specified parameters.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="parameters">An argument list for the invoked constructor. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetInvokeMethodDelegate``1(System.Reflection.MethodInfo)">
            <summary>
             Get method for call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The specified <see cref="T:System.Reflection.MethodInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetInvokeMethodValueTypeDelegate``1(System.Reflection.MethodInfo)">
            <summary>
             Get method for call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The specified <see cref="T:System.Reflection.MethodInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.InvokeMethod``1(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
            Invokes the method represented by the specified <see cref="T:System.Reflection.MethodInfo"/>, using the specified parameters.
            </summary>
            <param name="methodInfo">The specified <see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.InvokeMethod``1(System.Reflection.MethodInfo,``0@,System.Object[])">
            <summary>
            Invokes the method represented by the specified <see cref="T:System.Reflection.MethodInfo"/>, using the specified parameters.
            </summary>
            <param name="methodInfo">The specified <see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.SetField``1(System.Reflection.FieldInfo,``0,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="fieldInfo">The specified <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <param name="target">The object whose field value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.SetField``1(System.Reflection.FieldInfo,``0@,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="fieldInfo">The specified <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <param name="target">The object whose field value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetSetFieldDelegate``1(System.Reflection.FieldInfo)">
            <summary>
            Get method for set specified <see cref="T:System.Reflection.FieldInfo"/> value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="fieldInfo">The specified <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetSetFieldValueTypeDelegate``1(System.Reflection.FieldInfo)">
            <summary>
            Get method for set specified <see cref="T:System.Reflection.FieldInfo"/> value.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="fieldInfo">The specified <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.SetProperty``1(System.Reflection.PropertyInfo,``0,System.Object)">
            <summary>
            Sets the value of the property supported by the given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="propertyInfo">The specified <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <param name="target">The object whose property value will be set.</param>
            <param name="value">The value to assign to the property.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.SetProperty``1(System.Reflection.PropertyInfo,``0@,System.Object)">
            <summary>
            Sets the value of the property supported by the given object.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="propertyInfo">The specified <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <param name="target">The object whose property value will be set.</param>
            <param name="value">The value to assign to the property.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetSetPropertyDelegate``1(System.Reflection.PropertyInfo)">
            <summary>
            Get method for set specified <see cref="T:System.Reflection.PropertyInfo"/> value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="propertyInfo">The specified <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetSetPropertyValueTypeDelegate``1(System.Reflection.PropertyInfo)">
            <summary>
            Get method for set specified <see cref="T:System.Reflection.PropertyInfo"/> value.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="propertyInfo">The specified <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetField``2(System.Reflection.FieldInfo,``0)">
            <summary>
            Returns the value of a field supported by a given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of <see cref="T:System.Reflection.FieldInfo"/>.</typeparam>
            <param name="fieldInfo">The specified <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <param name="target">The object whose field value will be returned.</param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetProperty``2(System.Reflection.PropertyInfo,``0)">
            <summary>
            Returns the value of a property supported by a given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of <see cref="T:System.Reflection.PropertyInfo"/>.</typeparam>
            <param name="propertyInfo">The specified <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <param name="target">The object whose property value will be returned.</param>
            <returns>An object containing the value of the property reflected by this instance.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetGetFieldDelegate``2(System.Reflection.FieldInfo)">
            <summary>
            Get method for get specified <see cref="T:System.Reflection.FieldInfo"/> value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of <see cref="T:System.Reflection.FieldInfo"/>.</typeparam>
            <param name="fieldInfo">The specified <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetGetPropertyDelegate``2(System.Reflection.PropertyInfo)">
            <summary>
            Get method for get specified <see cref="T:System.Reflection.PropertyInfo"/> value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of <see cref="T:System.Reflection.PropertyInfo"/>.</typeparam>
            <param name="propertyInfo">The specified <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.ConvertToWeakDelegate``1(``0)">
            <summary>
             Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.ConvertToWeakDelegate``1(``0,System.Action{``0})">
            <summary>
             Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <param name="unsubcribeDelegate">The unregister action to invoke if the target is garbage collected.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="T:MugenInjection.Activators.EmitActivator">
            <summary>
            Activator use emit for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Creates new instance of specified service.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Inject(System.Type,System.Object@)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="targetType">The specified target <see cref="T:System.Type"/>.</param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.ReflectionActivator">
            <summary>
            A activator use reflection for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ReflectionActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
            Creates new instance of specified service.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.ReflectionActivator.Inject(System.Type,System.Object@)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="targetType">The specified target <see cref="T:System.Type"/>.</param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="T:MugenInjection.Attributes.AutoLoadModuleAttribute">
            <summary>
            It is used to automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.AutoLoadModuleRequiredAttribute">
            <summary>
            It is used to required automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.InjectAttribute">
            <summary>
            Attribute that indicates where need inject specified service.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.NamedParameterAttribute">
            <summary>
            Attribute that indicates where need inject specified service with specified binding name.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.ResolverAttribute">
            <summary>
            Base class for resolve attribute.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.ResolverAttribute.ResolveValue(MugenInjection.Interface.IBindingContext,System.Type,MugenInjection.Core.Components.ServiceType)">
            <summary>
            Resolve instance for the specified request.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="originalServiceType">Contains the element type for arrays, collections, etc.</param>
            <param name="serviceType">Contains information about the type of service.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.NamedParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.ResolveValue(MugenInjection.Interface.IBindingContext,System.Type,MugenInjection.Core.Components.ServiceType)">
            <summary>
            Resolve instance for the specified request.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="originalServiceType">Contains the element type for arrays, collections, etc.</param>
            <param name="serviceType">Contains information about the type of service.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Attributes.NamedParameterAttribute.Name">
            <summary>
            The specified binding name
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.OptionalParameterAttribute">
            <summary>
            Attribute that indicates where need inject specified service if service can't resolve using default value.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.OptionalParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.OptionalParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.ResolveValue(MugenInjection.Interface.IBindingContext,System.Type,MugenInjection.Core.Components.ServiceType)">
            <summary>
            Resolve instance for the specified request.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="originalServiceType">Contains the element type for arrays, collections, etc.</param>
            <param name="serviceType">Contains information about the type of service.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Attributes.OptionalParameterAttribute.Value">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.BindingBase">
            <summary>
            Base class for binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBinding">
            <summary>
            Contains information about a service registration.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IHaveSetting">
            <summary>
            Providing specific setting.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.AddSetting(System.String,System.Object)">
            <summary>
            Adds the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to set.</param>
            <param name="obj">The specified setting value.</param>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.RemoveSetting(System.String)">
            <summary>
            Removes the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to remove.</param>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.GetSetting(System.String)">
            <summary>
            Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.GetSetting``1(System.String)">
            <summary>
            Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.TryGetSetting(System.String,System.Object@)">
            <summary>
            Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns><c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.TryGetSetting``1(System.String,``0@)">
            <summary>
            Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns><c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IHaveSetting.IsContain(System.String)">
            <summary>
            Determines whether the specified setting name can be resolved.
            </summary>
            <param name="name">The setting name of the value to check.</param>
            <returns><c>True</c> if the specified setting has been contains; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IHaveSetting.Item(System.String)">
            <summary>
            Gets or sets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get or set.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBinding.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBinding.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ScopeLifecycleBase">
            <summary>
            Gets the lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Priority">
            <summary>
            Gets the priority for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Parameters">
            <summary>
            Gets the parameters for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Services">
            <summary>
            Gets the service types.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.#ctor(System.Collections.Generic.IList{System.Type},MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="services">The specified services type.</param>
            <param name="dependencyLifecycle">The specified <see cref="P:MugenInjection.Bindings.BindingBase.ScopeLifecycleBase"/>.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.BeginDetectCycle(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Begin detect a cycle dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.EndDetectCycle">
            <summary>
            End detect a cycle dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.MergeParameter(System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Merge parameters with the current bindings.
            </summary>
            <param name="userParameter">The specified input parameters.</param>
            <returns>The merged parameters.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.IsAssignableService(System.Type)">
            <summary>
            Determines whether the specified type is assignable for current binding.
            </summary>
            <param name="checkType">The specified <see cref="T:System.Type"/> to check.</param>
            <returns><c>True</c> if the specified type is assignable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnActivating(MugenInjection.Interface.IBindingContext)">
            <summary>
            On activating the <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="bindingContext"></param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnActivated(System.Object)">
            <summary>
            On activated the <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnDisposed">
            <summary>
            On disposed the <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.AddSetting(System.String,System.Object)">
            <summary>
            Adds the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to set.</param>
            <param name="obj">The specified setting value.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.RemoveSetting(System.String)">
            <summary>
            Removes the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to remove.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.GetSetting(System.String)">
            <summary>
            Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.GetSetting``1(System.String)">
            <summary>
            Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.TryGetSetting(System.String,System.Object@)">
            <summary>
            Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns><c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.TryGetSetting``1(System.String,``0@)">
            <summary>
            Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns><c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.IsContain(System.String)">
            <summary>
            Determines whether the specified setting name can be resolved.
            </summary>
            <param name="name">The setting name of the value to check.</param>
            <returns><c>True</c> if the specified setting has been contains; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Equals(MugenInjection.Bindings.BindingBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.TryDisposeObject">
            <summary>
            Gets the flag try dispose object when dispose binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ScopeLifecycleBase">
            <summary>
            Gets the lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Priority">
            <summary>
            Gets the priority for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Parameters">
            <summary>
            Gets the parameters for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Services">
            <summary>
            Gets the service types.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Item(System.String)">
            <summary>
            Gets or sets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get or set.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="T:MugenInjection.Interface.IBindingBuilder">
            <summary>
            Contains information about creating bindings
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingBuilder.Build">
            <summary>
            Build current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Interface.IBindingBuilder.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingBuilder.Services">
            <summary>
            Gets the specified service types. 
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingBuilder.Builded">
            <summary>
            Occurs after build current binding.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingBuilder.AfterBuilded">
            <summary>
            Occurs after build current binding, you can change binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.#ctor(System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IInjector)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="services"></param>
            <param name="injector"> </param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderBase.Build">
            <summary>
            Build current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilderBase.Services">
            <summary>
            Gets the specified service types. 
            </summary>
        </member>
        <member name="E:MugenInjection.Bindings.Builders.BindingBuilderBase.Builded">
            <summary>
            Occurs after build current binding.
            </summary>
        </member>
        <member name="E:MugenInjection.Bindings.Builders.BindingBuilderBase.AfterBuilded">
            <summary>
            Occurs after build current binding, you can change binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.IBindingSyntax">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.ICommonBindingSyntax">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.ICommonBindingSyntax.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.ICommonBindingSyntax.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <param name="typeTo">The specified <see cref="T:System.Type"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.ICommonBindingSyntax.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToMethod(MugenInjection.Delegates.MethodBindingDelegate)">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToConstant(System.Object)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`1">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To``1">
            <summary>
            Indicates that the service should be bound to the specified type <see cref="!:T"/>.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToConstant(`0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`2">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`3">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`4">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.Build">
            <summary>
            Build current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified type.
            </summary>
            <param name="typeTo">The specified <see cref="T:System.Type"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToMethod(MugenInjection.Delegates.MethodBindingDelegate)">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToConstant(System.Object)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#To``1">
            <summary>
            Indicates that the service should be bound to the specified type <see cref="!:T1"/>.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TTypeTo"> </typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#ToConstant(`0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.To(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`4.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`4.Services">
            <summary>
            Gets the specified service types. 
            </summary>
        </member>
        <member name="E:MugenInjection.Bindings.Builders.BindingBuilder`4.Builded">
            <summary>
            Occurs after build current binding.
            </summary>
        </member>
        <member name="E:MugenInjection.Bindings.Builders.BindingBuilder`4.AfterBuilded">
            <summary>
            Occurs after build current binding, you can change binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantCallbackSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantObjectSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantPrioritySyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.PriorityBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantWhenSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantCallbackObjectSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantCallbackObjectPriorityWhenSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantCallbackObjectPrioritySyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.#ctor(System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IInjector,System.Object)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="services"></param>
            <param name="injector"></param>
            <param name="value"> </param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConstantBindingBuilder.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodObjectSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodPrioritySyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.PriorityBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodScopeSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InLocalManagedScope">
            <summary>
            Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment, 
            for each instance of an <see cref="T:MugenInjection.Interface.IManagedScope"/> using its object in the each <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodWhenSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument``1(System.String,System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithFieldValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectUseWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodUseSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseReflectionActivator">
            <summary>
            Use reflection activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseEmitActivator">
            <summary>
            Use emit activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseExpressionActivator">
            <summary>
            Use expression activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityUseWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityScopeUseWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityScopeUseWhenWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.#ctor(MugenInjection.Interface.IBinding,System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IInjector)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="customBinding"> </param>
            <param name="services"></param>
            <param name="injector"></param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.#ctor(MugenInjection.Delegates.MethodBindingDelegate,System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IInjector)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="methodBindingDelegate"> </param>
            <param name="services"></param>
            <param name="injector"></param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="dependencyLifecycle"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.InLocalManagedScope">
            <summary>
            Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment, 
            for each instance of an <see cref="T:MugenInjection.Interface.IManagedScope"/> using its object in the each <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithConstructorArgument``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithMethodArgument``1(System.String,System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithPropertyValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithFieldValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.UseReflectionActivator">
            <summary>
            Use reflection activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.UseEmitActivator">
            <summary>
            Use emit activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.UseExpressionActivator">
            <summary>
            Use expression activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.MethodCustomBindingBuilder.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityScopeUseWhenWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating">The specified <see cref="T:System.Action`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated">The specified <see cref="T:System.Action`1"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified <see cref="T:System.Action`1"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeConstructorSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <param name="types">The specified parameters for search constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``1">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``2">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``3">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``4">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``5">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeObjectSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypePrioritySyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.PriorityBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeScopeSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InUnitOfWorkScope">
            <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
            should be re-used for all subsequent requests. 
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InLocalManagedScope">
            <summary>
            Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment, 
            for each instance of an <see cref="T:MugenInjection.Interface.IManagedScope"/> using its object in the each <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeUseSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseReflectionActivator">
            <summary>
            Use reflection activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseEmitActivator">
            <summary>
            Use emit activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseExpressionActivator">
            <summary>
            Use expression activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomConstructorResolver(System.Func{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeWhenSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument``1(System.String,System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithFieldValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityScopeUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackObjectPriorityUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackObjectUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.#ctor(System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IInjector,System.Type)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="services"></param>
            <param name="injector"></param>
            <param name="typeTo"> </param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.#ctor(System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IInjector,System.Reflection.ConstructorInfo)">
            <summary>
            Create new instance <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderBase"/>.
            </summary>
            <param name="services"></param>
            <param name="injector"></param>
            <param name="constructor"> </param>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.BuildBinding">
            <summary>
            Build <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.OnActivated(System.Action{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``1">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``2">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``3">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``4">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TakeConstructor``5">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetPriority(MugenInjection.Infrastructure.PriorityBinding)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetStandardPriority">
            <summary>
             Set standard priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InScope(MugenInjection.Scope.ScopeLifecycleBase)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="dependencyLifecycle"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.InLocalManagedScope">
            <summary>
            Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment, 
            for each instance of an <see cref="T:MugenInjection.Interface.IManagedScope"/> using its object in the each <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseReflectionActivator">
            <summary>
            Use reflection activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseEmitActivator">
            <summary>
            Use emit activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseExpressionActivator">
            <summary>
            Use expression activator for create new instance of object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="activator"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.UseCustomConstructorResolver(System.Func{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithConstructorArgument``1(System.String,``0)">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithConstructorArgument``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithConstructorArgument``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified constructor argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithMethodArgument``1(System.String,System.String,``0)">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithMethodArgument``1(System.String,System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="methodName"></param>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithMethodArgument``1(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified method argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithPropertyValue``1(System.String,``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithPropertyValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithPropertyValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified propety argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithFieldValue``1(System.String,``0)">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithFieldValue``1(System.String,``0,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="parameterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithFieldValue``1(System.String,MugenInjection.Delegates.ParameterDelegate{``0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Use specified field argument.
            </summary>
            <typeparam name="TType">The specified type of argument.</typeparam>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.TypeBindingBuilder.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Bindings.ConstantBinding">
            <summary>
            Represent the constant binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.ConstantBinding._value">
            <summary>
            A const service value.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.#ctor(System.Object,System.Collections.Generic.IList{System.Type},MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.ConstantBinding"/>.
            </summary>
            <param name="value">Constant value.</param>
            <param name="services">The specified services types.</param>
            <param name="dependencyLifecycle">The specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/></param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Bindings.CustomBinding">
            <summary>
            Represent the custom binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.CustomBinding._activator">
            <summary>
            The <see cref="T:MugenInjection.Interface.IActivator"/> for activate object.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.CustomBinding._customBinding">
            <summary>
            The specified <see cref="T:MugenInjection.Interface.IBinding"/> for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.#ctor(MugenInjection.Interface.IBinding,MugenInjection.Interface.IActivator,System.Collections.Generic.IList{System.Type},MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.CustomBinding"/>.
            </summary>
            <param name="customBinding">The specified custom binding.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/> for activate object. </param>
            <param name="services">The specified services types.</param>
            <param name="dependencyLifecycle">The specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/></param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.CustomBinding.Activator">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IActivator"/> for current binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.MethodBinding">
            <summary>
            Represent the method binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.MethodBinding._activator">
            <summary>
            The <see cref="T:MugenInjection.Interface.IActivator"/> for activate object.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.MethodBinding._method">
            <summary>
            The specified method for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.#ctor(MugenInjection.Delegates.MethodBindingDelegate,MugenInjection.Interface.IActivator,System.Collections.Generic.IList{System.Type},MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.MethodBinding"/>.
            </summary>
            <param name="method">The specified method for activate object.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/> for activate object.</param>
            <param name="services">The specified services types.</param>
            <param name="dependencyLifecycle">The specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/></param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.MethodBinding.Activator">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IActivator"/> for current binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.TypeBinding">
            <summary>
            Represent the type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.#ctor(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver,System.Collections.Generic.IList{System.Type},MugenInjection.Scope.ScopeLifecycleBase,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Bindings.MethodBinding"/>.
            </summary>
            <param name="typeTo">The specified type for activate.</param>
            <param name="constructorResolver">The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="services">The specified services types.</param>
            <param name="dependencyLifecycle">The specified <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.MergeGeneric(System.Type)">
            <summary>
            Merge the generic types.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/>.</param>
            <returns>The generic type.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.CreateSelfBinding(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Create self bindable <see cref="T:MugenInjection.Bindings.TypeBinding"/>.
            </summary>
            <param name="service"></param>
            <param name="activator"></param>
            <param name="constructorResolver"></param>
            <returns></returns>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.Activator">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IActivator"/> for current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.ConstructorResolver">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/> for current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.TypeTo">
            <summary>
            Gets the specified type for activate.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.BindingActivatorComponent">
            <summary>
            Base class for a component bindings activation.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.Component">
            <summary>
            Base class for components of the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IComponent">
            <summary>
            Represent components of the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Load(MugenInjection.Interface.IInjector)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Load(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="addToContainer">Indicates whether the component is automatically added to the <see cref="T:MugenInjection.Interface.IComponentContainer"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Unload">
            <summary>
            Unloads the current component from <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.ComponentType">
            <summary>
            Gets the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsLoaded">
            <summary>
            Indicates that the component is loaded.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsLoading">
            <summary>
            Indicates that the component is now loading.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsUnloading">
            <summary>
            Indicates that the component is now unloading.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Loading">
            <summary>
            Occured after loading current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Loaded">
            <summary>
            Occured after loaded current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Unloading">
            <summary>
            Occured after unloading current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Unloaded">
            <summary>
            Occured after unloaded current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Load(MugenInjection.Interface.IInjector)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Load(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="addToContainer">Indicates whether the component is automatically added to the <see cref="T:MugenInjection.Interface.IComponentContainer"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Unload">
            <summary>
            Unloads the current component from <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.ComponentType">
            <summary>
            Gets the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsLoaded">
            <summary>
            Indicates that the component is loaded.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsLoading">
            <summary>
            Indicates that the component is now loading.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsUnloading">
            <summary>
            Indicates that the component is now unloading.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Loading">
            <summary>
            Occured after loading current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Loaded">
            <summary>
            Occured after loaded current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Unloading">
            <summary>
            Occured after unloading current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Unloaded">
            <summary>
            Occured after unloaded current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IBindingActivatorComponent">
            <summary>
            Base interface for a component bindings activation.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.Activate(MugenInjection.Interface.IBinding,MugenInjection.Interface.IBindingContext)">
            <summary>
            Activates the specified <see cref="T:MugenInjection.Interface.IBinding"/> with specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.Inject(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="target">The specified object for inject.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.GetParameters(System.Reflection.MethodBase,MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets parameters for the specified <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <param name="methodBase">The specified <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instnces of services.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.GetParameter(System.Reflection.MemberInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets parameter for the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.Components.IBindingActivatorComponent.ActivatorForInject">
            <summary>
            Gets or sets a <see cref="T:MugenInjection.Interface.IActivator"/> for inject property, method, fields in specified object.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.Activate(MugenInjection.Interface.IBinding,MugenInjection.Interface.IBindingContext)">
            <summary>
            Activates the specified <see cref="T:MugenInjection.Interface.IBinding"/> with specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of service.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.Inject(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="target">The specified object for inject.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.GetParameters(System.Reflection.MethodBase,MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets parameters for the specified <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <param name="methodBase">The specified <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instnces of services.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.GetParameter(System.Reflection.MemberInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets parameter for the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of service.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.DetectServiceType(System.Type,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
            Identify the object type and create a converter for result object.
            </summary>
            <param name="type">The service to identify.</param>
            <param name="originalType">The original type of service. </param>
            <param name="converterAction">A method for convert service object(s).</param>
            <returns>An service type value.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.ConvertToArray(System.Type,System.Type,System.Object)">
            <summary>
            Convert an object(s) to array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.ConvertToCollection(System.Type,System.Reflection.ConstructorInfo,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Convert an object(s) to collection.
            </summary>
            <param name="requestType"> </param>
            <param name="constructorInfo"></param>
            <param name="addMethod"> </param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.ActivatorForInject">
            <summary>
            Gets or sets a <see cref="T:MugenInjection.Interface.IActivator"/> for inject property, method, fields in specified object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.ComponentType">
            <summary>
            Returns the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.ServiceType">
            <summary>
            Contains information about the type of service.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.ServiceType.Array">
            <summary>
            Indicates that the type of object is array.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.ServiceType.Collection">
            <summary>
            Indicates that the type of object is collection.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.ServiceType.Simple">
            <summary>
            Indicates that the type of object is simple.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.BindingManagerComponent">
            <summary>
            The base class for components of the manage <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IBindingManagerComponent">
            <summary>
            The base interface for components of the manage <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.FindBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches for a <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified a <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.FindAllBinding(System.Type)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified a <see cref="T:System.Type"/>
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>s.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.FindAllBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>s.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.GetPriorityBinding(MugenInjection.Interface.IBindingContext,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IBinding})">
            <summary>
            Selects binding with high priority (check duplicate bindings).
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="bindings">Specifid <see cref="T:System.Collections.Generic.IEnumerator`1"/> for select <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Selected a <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.CreateSelfBindable(System.Type)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>. By default, uses the cache for the bindings.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.CreateSelfBindable(System.Type,MugenInjection.Interface.IActivator,System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="useCache">Use cache for create a <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.CreateSelfBindable(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver,System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="constructorResolver">Specifid <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="useCache">Use cache for create a <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="F:MugenInjection.Core.Components.BindingManagerComponent._selfBindableCache">
            <summary>
            Self bindable cache.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.FindBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches for a <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified a <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.FindAllBinding(System.Type)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified a <see cref="T:System.Type"/>
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>s.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.FindAllBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>s.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.GetPriorityBinding(MugenInjection.Interface.IBindingContext,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IBinding})">
            <summary>
            Selects binding with high priority (check duplicate bindings).
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="bindings">Specifid <see cref="T:System.Collections.Generic.IEnumerator`1"/> for select <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Selected a <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.CreateSelfBindable(System.Type)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>. By default, uses the cache for the bindings.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.CreateSelfBindable(System.Type,MugenInjection.Interface.IActivator,System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="useCache">Use cache for create a <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.CreateSelfBindable(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver,System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="constructorResolver">Specifid <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="useCache">Use cache for create a <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.CreateSelfBindableInternal(System.Type,System.Func{MugenInjection.Interface.IActivator},System.Func{MugenInjection.Interface.IConstructorResolver},System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="constructorResolver">Specifid <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="useCache">Use cache for create a <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Created a <see cref="T:MugenInjection.Interface.IBinding"/></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingManagerComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingManagerComponent.ComponentType">
            <summary>
            Returns the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.ModuleManagerComponent">
            <summary>
            The base class for components for the automatically finds and loads modules from assemblies.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IModuleManagerComponent">
            <summary>
            The base interface for components for the automatically finds and loads modules from assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IModuleManagerComponent.LoadModules(System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IModuleManagerComponent.RescanFiles">
            <summary>
            Rescan files.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IModuleManagerComponent.UpdateAutoLoadModuleIfNeed">
            <summary>
            Loads "auto modules" defined in the loaded assemblies.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IModuleManagerComponent.AutoScanAssembly">
            <summary>
            Indicates whether the automatic scan of the files, default is <c>true</c>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IModuleManagerComponent.Extensions">
            <summary>
            Gets the extensions for load. The default extensions is .exe and .dll.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IModuleManagerComponent.ExcludedFiles">
            <summary>
            Gets the excluded files.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.#ctor">
            <summary>
            Create new instance <see cref="T:MugenInjection.Core.Components.ModuleManagerComponent"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Create new instance <see cref="T:MugenInjection.Core.Components.ModuleManagerComponent"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.LoadModules(System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.RescanFiles">
            <summary>
            Rescan files.
            </summary>
            <returns>Loaded <see cref="T:System.Reflection.Assembly"/>(s)</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.UpdateAutoLoadModuleIfNeed">
            <summary>
            Loads "auto modules" defined in the loaded assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.GetAssemblies">
            <summary>
            Gets all the <see cref="T:System.Reflection.Assembly"/> for loads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.LoadRequiredModule">
            <summary>
            Loads required "auto modules" defined in the loaded assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.LoadModules(System.Collections.Generic.IList{System.Collections.Generic.IList{System.Type}},System.Type)">
            <summary>
            Loads modules Loads modules into an <see cref="T:MugenInjection.Interface.IInjector"/>. If the modules are loaded skips them.
            </summary>
            <param name="types"></param>
            <param name="attributeType"></param>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.AutoScanAssembly">
            <summary>
            Indicates whether the automatic scan of the files, default is <c>true</c>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.Extensions">
            <summary>
            Gets the extensions for load. The default extensions is .exe and .dll.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.ExcludedFiles">
            <summary>
            Gets the excluded files.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.ComponentType">
            <summary>
            Returns the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.DefaultInjectorSetting">
            <summary>
            The default implementation of <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorSettings">
            <summary>
            Contains configuration options for specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ThrowErrorForNullableBinding">
            <summary>
            <c>True</c>Throw error if binding provider return null result; otherwise, <c>false</c>. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.UseParentForResolve">
            <summary>
            <c>False</c> If the binding is not found in the current container, but is found in the parent. Activate the binding in the current container; otherwise, <c>True</c>. (see example). (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.IsAutoLoadModuleEnabled">
            <summary>
            Indicates whether the automatic loading of the module. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.AttributeForAutoLoadModule">
            <summary>
            Attribute used to automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>. (Default <see cref="T:MugenInjection.Attributes.AutoLoadModuleAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ThrowErrorIfNotLoadAssembly">
            <summary>
            Throw an error if unable to load the assembly. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.AttributeForInject">
            <summary>
            Attribute specifies where to use injection. (Default <see cref="T:MugenInjection.Attributes.InjectAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultActivator">
            <summary>
            The specified type for default IActivator. (Default <see cref="T:MugenInjection.Activators.ExpressionActivator"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolver">
            <summary>
            The specified type for default IConstructorResolver. (Default <see cref="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolver"/>)
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IInjectorSettings.SettingChanged">
            <summary>
            Occurs when a setting value changes.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DefaultInjectorSetting.#ctor">
            <summary>
            Create new instance <see cref="T:MugenInjection.Core.DefaultInjectorSetting"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DefaultInjectorSetting.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ThrowErrorForNullableBinding">
            <summary>
            <c>True</c>Throw error if binding provider return null result; otherwise, <c>false</c>. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.UseParentForResolve">
            <summary>
            <c>False</c> If the binding is not found in the current container, but is found in the parent. Activate the binding in the current container; otherwise, <c>True</c>. (see example). (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.IsAutoLoadModuleEnabled">
            <summary>
            Indicates whether the automatic loading of the module. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.AttributeForAutoLoadModule">
            <summary>
            Attribute used to automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>. (Default <see cref="T:MugenInjection.Attributes.AutoLoadModuleAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ThrowErrorIfNotLoadAssembly">
            <summary>
            Throw an error if unable to load the assembly. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.AttributeForInject">
            <summary>
            Attribute specifies where to use injection.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultActivator">
            <summary>
            The specified type for default <see cref="T:MugenInjection.Interface.IActivator"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultConstructorResolver">
            <summary>
            The specified type for default <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.DefaultInjectorSetting.SettingChanged">
            <summary>
            Occurs when a setting value changes.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.InjectorBase">
            <summary>
            The base implementation of an <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjector">
            <summary>
            Represents the ioc container, that can create objects of all kinds.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorResolver">
            <summary>
            Provides a path to resolve instances.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.Inject(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="target">The specified object for inject.</param>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for self bindable.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves an instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.ResolveAll(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves all instances for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves all instances for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorBinder">
            <summary>
            Provides a path to register bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.CreateBinderContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.GetBindings(System.Type)">
            <summary>
            Gets all binding for tne specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.GetBindings(MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets all binding for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>A series of bindings that are registered for the <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorBinder.Bindings">
            <summary>
            Gets the collection of all bindings for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.GetRoot">
            <summary>
            Gets the root <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.GetParent">
            <summary>
            Gets the parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.SetParent(MugenInjection.Interface.IInjector)">
            <summary>
            Sets the specified <see cref="T:MugenInjection.Interface.IInjector"/> as a parent, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.CreateChild(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Boolean,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="cloneComponents">The specifies whether to clone the components from the parent.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.AddChild(MugenInjection.Interface.IInjector)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IInjector"/> in the collection of <c>ChildInjectors</c>, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.RemoveChild(MugenInjection.Interface.IInjector)">
            <summary>
            Removes the child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ModuleIsLoaded(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="name">The specified module name.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ModuleIsLoaded(System.Type)">
            <summary>
            Determines whether a module with the specified <see cref="T:System.Type"/> has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Load(System.Type)">
            <summary>
            Creates a new instance of the module and loads it into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">The type of the module.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Load(MugenInjection.Core.InjectorModule)">
            <summary>
            Loads the module into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="module">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Unload(System.String)">
            <summary>
            Unloads the module with the specified name.
            </summary>
            <param name="name">The specified module name.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Unload(System.Type)">
            <summary>
            Unloads the module with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleType">The specified module <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Release(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Releases specified service with specified condition in scope.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ReleaseAll(System.Type,System.Boolean)">
            <summary>
            Releases all specified service in scope.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/> for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Modules">
            <summary>
            Gets the collection of all modules for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.ChildInjectors">
            <summary>
            Gets the collection of children <see cref="T:MugenInjection.Interface.IInjector"/>s.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Settings">
            <summary>
            Gets the configuration options for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Components">
            <summary>
            Gets the collection of all components for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Core.InjectorBase"/>.
            </summary>
            <param name="parent">The specified parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="settings">The specified <see cref="T:MugenInjection.Interface.IInjectorSettings"/> for current <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainerContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s). </param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.LoadComponents(System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent})">
            <summary>
            Loads the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>s in the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="components">The specifeid <see cref="T:MugenInjection.Interface.Components.IComponent"/>s.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.TryResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Try resolve the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> using custom behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="findInParent">Find in parent bindings.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindInParent(MugenInjection.Interface.IBindingContext)">
            <summary>
            Finds the <see cref="T:MugenInjection.Interface.IBinding"/> from the parent <see cref="T:MugenInjection.Interface.IInjector"/> using the specifed <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindModule(System.String)">
            <summary>
            Finds the specified module.
            </summary>
            <param name="name">The specified module name.</param>
            <returns>An instance of <see cref="T:MugenInjection.Core.InjectorModule"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindModule(System.Type)">
            <summary>
            Finds the specified module.
            </summary>
            <param name="type">The specified module <see cref="T:System.Type"/>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Core.InjectorModule"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetParameters(System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Casts or creates the <see cref="T:MugenInjection.Interface.IInjectionParameter"/>s.
            </summary>
            <param name="parameters">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>s</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.UnloadModuleInternal(MugenInjection.Core.InjectorModule)">
            <summary>
            Unloads the specified <see cref="T:MugenInjection.Core.InjectorModule"/>.
            </summary>
            <param name="injectorModule">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateContextInternal(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Activate(MugenInjection.Interface.IBinding,MugenInjection.Interface.IBindingContext)">
            <summary>
            Checking the output result.
            </summary>
            <returns>An instance of service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChildInjector(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Inject(System.Object,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects property, method, fields in specified object.
            </summary>
            <param name="target">The specified object for inject.</param>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for self bindable.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves an instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves all instances for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ResolveAll(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves all instances for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateBinderContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetBindings(System.Type)">
            <summary>
            Gets all binding for tne specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetBindings(MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets all binding for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>A series of bindings that are registered for the <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetRoot">
            <summary>
            Gets the root <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetParent">
            <summary>
            Gets the parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.SetParent(MugenInjection.Interface.IInjector)">
            <summary>
            Sets the specified <see cref="T:MugenInjection.Interface.IInjector"/> as a parent, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChild(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Boolean,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="cloneComponents">The specifies whether to clone the components from the parent.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.AddChild(MugenInjection.Interface.IInjector)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IInjector"/> in the collection of <c>ChildInjectors</c>, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.RemoveChild(MugenInjection.Interface.IInjector)">
            <summary>
            Removes the child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ModuleIsLoaded(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="name">The specified module name.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ModuleIsLoaded(System.Type)">
            <summary>
            Determines whether a module with the specified <see cref="T:System.Type"/> has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Load(System.Type)">
            <summary>
            Creates a new instance of the module and loads it into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">The type of the module.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Load(MugenInjection.Core.InjectorModule)">
            <summary>
            Loads the module into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="module">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Unload(System.String)">
            <summary>
            Unloads the module with the specified name.
            </summary>
            <param name="name">The specified module name.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Unload(System.Type)">
            <summary>
            Unloads the module with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleType">The specified module <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Release(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Releases specified service with specified condition in scope.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ReleaseAll(System.Type,System.Boolean)">
            <summary>
            Releases all specified service in scope.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/> for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Bindings">
            <summary>
            Gets the collection of all bindings for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Modules">
            <summary>
            Gets the collection of all modules for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.ChildInjectors">
            <summary>
            Gets the collection of children <see cref="T:MugenInjection.Interface.IInjector"/>s.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Settings">
            <summary>
            Gets the configuration options for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Components">
            <summary>
            Gets the collection of all components for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.InjectorModule">
            <summary>
            Base class for module which can load in <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind(System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="services">The specified service types.</param>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``1">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``2">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``3">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``4">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.BindTo``2">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.AddComponent(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for adding.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.LoadInternal(MugenInjection.Interface.IInjector)">
            <summary>
            Loads bindings and components in current module. 
            </summary>
            <param name="injector"></param>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.UnloadInternal(MugenInjection.Interface.IInjector)">
            <summary>
            Unloads bindings and components in current module. 
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.GetName">
            <summary>
            Gets the module name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Load">
            <summary>
            Loads bindings and components in current module. 
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Unload(System.Collections.Generic.IList{MugenInjection.Interface.IBinding},System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent})">
            <summary>
            Unloads bindings and components in current module. 
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorModule.Injector">
            <summary>
            Current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Delegates.CanResolveBindingDelegate">
            <summary>
            Delegate to check the conditions in the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/></param>
            <returns>The result of check.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.CustomScopeDelegate">
            <summary>
            Resolve instance for the specified <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>. Delegate to represent the <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>.
            </summary>
            <param name="scopeLifecycleContext">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.SetterValueTypeDelegate`1">
            <summary>
            Delegate used to assign an object value for the value <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="target">The object whose value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="T:MugenInjection.Delegates.SetterDelegate`1">
            <summary>
            Delegate used to assign an object value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="target">The object whose value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="T:MugenInjection.Delegates.GetterDelegate`2">
            <summary>
            Delegate used to get an object value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of result object.</typeparam>
            <param name="target">The object whose field value will be returned.</param>
            <returns>An object containing the value of the member reflected by this instance.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.InvokeMethodDelegate`1">
            <summary>
            Delegate used to invokes the method using the specified parameters.
            </summary>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Delegates.InvokeMethodValueTypeDelegate`1">
            <summary>
            Delegate used to invokes the method using the specified parameters for the value <see cref="T:System.Type"/>.
            </summary>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Delegates.BuildBindingDelegate">
            <summary>
            Delegate for the management of the build of the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary> 
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Indicates whether the construction is completed.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.MethodBindingDelegate">
            <summary>
            Delegate used to resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.MethodBindingDelegate`1">
            <summary>
            Delegate used to resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <typeparam name="T">The specified object type.</typeparam>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.ParameterDelegate`1">
            <summary>
            Delegate used to resolve parameter for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <typeparam name="T">The specified parameter type.</typeparam>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter.</returns>
        </member>
        <member name="T:MugenInjection.EmitReflectionExtension">
            <summary>
            A class for use with reflection, provides quick access to the members of an object.
            </summary>
        </member>
        <member name="M:MugenInjection.EmitReflectionExtension.LoadMethodArguments(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
            Load method argument in IL.
            </summary>
            <param name="il"></param>
            <param name="targetMethod"></param>
        </member>
        <member name="M:MugenInjection.EmitReflectionExtension.UnboxOrCast(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Unbox or cast specified type.
            </summary>
            <param name="il"></param>
            <param name="typeForBuild"></param>
        </member>
        <member name="M:MugenInjection.EmitReflectionExtension.CreateDynamicMethod(System.Type,System.Type[],System.Type)">
            <summary>
            Create dynamic method with skip visibility.
            </summary>
            <param name="type"></param>
            <param name="inputValue"></param>
            <param name="outputValue"></param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Exceptions.ActivatorException">
            <summary>
            The exception that is thrown when you activate the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.ActivatorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ActivatorException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.ActivatorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ActivatorException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.BindingException">
            <summary>
            The base class for errors associated with the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.BindingNotFoundException">
            <summary>
            The exception that is thrown when the corresponding <see cref="T:MugenInjection.Interface.IBinding"/> is not found.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingNotFoundException"/> class with a specified error message.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.ConflictBindingException">
            <summary>
            The exception that is thrown when find duplicate bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.ConflictBindingException.#ctor(MugenInjection.Interface.IBindingContext,MugenInjection.Interface.IBinding)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ConflictBindingException"/> class with a specified error message.
            </summary>
            <param name="bindingContext">Specifed <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.ConflictBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ConflictBindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.ConflictBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ConflictBindingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.CyclicDependencyException">
            <summary>
            The exception that is thrown when find cyclic bindings dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.CyclicDependencyException.#ctor(MugenInjection.Interface.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.CyclicDependencyException"/> class with a specified error message.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.CyclicDependencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.CyclicDependencyException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.CyclicDependencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.CyclicDependencyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.InvalidBindingException">
            <summary>
            The exception that is thrown when find invalid binding configuration.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidBindingException.#ctor(MugenInjection.Interface.IBinding,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidBindingException"/> class with a specified error message.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidBindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidBindingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.InvalidSettingException">
            <summary>
            The exception that is thrown when find invalid settings.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidSettingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidSettingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidSettingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidSettingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.NullableBindingException">
            <summary>
            The exception that is thrown when the binding return null result.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.NullableBindingException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.NullableBindingException"/> class with a specified error message.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.NullableBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.NullableBindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.NullableBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.NullableBindingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Infrastructure.BindingCollection">
            <summary>
            An internal container that manages and resolves <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingCollection">
            <summary>
            Specific collection for <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.WhereCanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Finds all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.WhereServiceEqual(System.Type)">
            <summary>
            Finds all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.AddBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.RemoveBindingBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="P:MugenInjection.Interface.IBindingCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IBindingCollection.BindingBuilders">
            <summary>
            Gets a collection of all <see cref="T:MugenInjection.Interface.IBindingBuilder"/> in current <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingCollection.AddedBinding">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingCollection.RemovedBinding">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.BindingCollection"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.WhereCanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Finds all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.WhereServiceEqual(System.Type)">
            <summary>
            Finds all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.AddBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.RemoveBindingBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingCollection.BindingBuilders">
            <summary>
            Gets a collection of all <see cref="T:MugenInjection.Interface.IBindingBuilder"/> in current <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.BindingCollection.AddedBinding">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.BindingCollection.RemovedBinding">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingContext">
            <summary>
            The context for resolve binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingContext.Update(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update the current <c>IBindingContext</c>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingContext.UpdateParameters(System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Update the current <c>Parameters</c>.
            </summary>
            <param name="parameters">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Service">
            <summary>
            Gets the specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.TypeInto">
            <summary>
            Gets the type into injected specified service <see cref="P:MugenInjection.Interface.IBindingContext.Service"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.ParameterInfo">
            <summary>
            Gets the <see cref="P:MugenInjection.Interface.IBindingContext.ParameterInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> for activate current context.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.CallInjector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> who call service activated.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Parameters">
            <summary>
            Gets the parameters for a specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.SpecialParameters">
            <summary>
            Gets the special parameters for current context.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.Update(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update the current <c>IBindingContext</c>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.UpdateParameters(System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Update the current <c>Parameters</c>.
            </summary>
            <param name="parameters">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Service">
            <summary>
            Gets the specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.TypeInto">
            <summary>
            Gets the type into injected specified service <see cref="P:MugenInjection.Interface.IBindingContext.Service"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.ParameterInfo">
            <summary>
            Gets the <see cref="P:MugenInjection.Interface.IBindingContext.ParameterInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> for activate current context.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.CallInjector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> who call service activated.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Parameters">
            <summary>
            Gets the parameters for a specified service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.SpecialParameters">
            <summary>
            Gets the special parameters for current context.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:MugenInjection.Infrastructure.ComponentContainer">
            <summary>
            An internal container that manages and resolves components.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IComponentContainer">
            <summary>
            An internal container that manages and resolves components.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Initialize(MugenInjection.Interface.IInjector)">
            <summary>
            Bind a collection to the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Add(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Remove(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.RemoveAll``1">
            <summary>
            Removes all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Get``1">
            <summary>
            Gets the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.TryGet``1(``0@)">
            <summary>
            Try gets the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="component">An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the component finds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.IsExist``1">
            <summary>
            Indicates the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <typeparam name="T">The specified component <see cref="T:System.Type"/>.</typeparam>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.IsExist(System.Type)">
            <summary>
            Indicates the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <param name="componentType">The specified component <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.IsContain(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Indicates the <see cref="T:MugenInjection.Interface.Components.IComponent"/> component exists in the collection.
            </summary>
            <param name="component">The specified component <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.GetAll``1">
            <summary>
            Gets all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instances of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.CloneAll">
            <summary>
            Creates a new object that is a copy of the current components.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.DisposeComponentAfterUnload">
            <summary>
            Indicates that the component will be disposed after unload (Default is <value>true</value>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.BindingManagerComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingManagerComponent"/> for manage bindings.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.BindingActivatorComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingActivatorComponent"/> for activate binding.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IComponentContainer.AddedComponent">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IComponentContainer.RemovedComponent">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.#ctor(MugenInjection.Interface.Components.IBindingActivatorComponent,MugenInjection.Interface.Components.IBindingManagerComponent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Initialize(MugenInjection.Interface.IInjector)">
            <summary>
            Bind a collection to the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Add(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Remove(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.RemoveAll``1">
            <summary>
            Removes all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Get``1">
            <summary>
            Gets the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.TryGet``1(``0@)">
            <summary>
            Try gets the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="component">An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the component finds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.IsExist``1">
            <summary>
            Indicates the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <typeparam name="T">The specified component <see cref="T:System.Type"/>.</typeparam>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.IsExist(System.Type)">
            <summary>
            Indicates the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <param name="componentType">The specified component <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.IsContain(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Indicates the <see cref="T:MugenInjection.Interface.Components.IComponent"/> component exists in the collection.
            </summary>
            <param name="component">The specified component <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.GetAll``1">
            <summary>
            Gets all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instances of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.CloneAll">
            <summary>
            Creates a new object that is a copy of the current components.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.DisposeComponentAfterUnload">
            <summary>
            Indicates that the component will be disposed after unload (Default is <value>true</value>).
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.ComponentContainer.AddedComponent">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.ComponentContainer.RemovedComponent">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.BindingManagerComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingManagerComponent"/> for manage bindings.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.BindingActivatorComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingActivatorComponent"/> for activate binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.DefaultConstructorResolver">
            <summary>
            Select constructor for specified service.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IConstructorResolver">
            <summary>
            Select constructor for specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IConstructorResolver.Resolve(System.Type,MugenInjection.Interface.IInjectorSettings,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Select constructor for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <param name="settings">The specified <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.</param>
            <param name="parameters">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>s.</param>
            <returns>An instance of the <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IConstructorResolver.SetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Sets the <see cref="T:System.Reflection.ConstructorInfo"/> for the current <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/></param>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultConstructorResolver.Resolve(System.Type,MugenInjection.Interface.IInjectorSettings,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Select constructor for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <param name="settings">The specified <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.</param>
            <param name="parameters">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>s.</param>
            <returns>An instance of the <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultConstructorResolver.SetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Sets the <see cref="T:System.Reflection.ConstructorInfo"/> for the current <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/></param>
        </member>
        <member name="T:MugenInjection.Infrastructure.InjectorUtils">
            <summary>
            The helper class.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.MugenInjectionAssemblyName">
            <summary>
            Contain MugenInjection assembly name with public key.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.EmptyTypes">
            <summary>
            Contains empty types.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.EmptyType">
            <summary>
            Contains empty type.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithCycleDependencyBehavior``1">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithCycleDependencyBehavior``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithDefaultCycleDependencyBehavior">
            <summary>
            Configure current settings with default <see cref="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithResolveUnregisteredTypeBehavior``1">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithResolveUnregisteredTypeBehavior``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Configure current settings with specified <see cref="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.WithDefaultResolveUnregisteredTypeBehavior">
            <summary>
            Configure current settings with default <see cref="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.TypeIsSelfBindable(System.Type)">
            <summary>
            Check type for SelfBindable.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.TypeIsBindable(System.Type,System.Type)">
            <summary>
            Check type for SelfBindable.
            </summary>
            <param name="typeFrom"> </param>
            <param name="typeTo"></param>
            <param name="skipCheckAccesible"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.RemoveDuplicate(System.Collections.Generic.IList{System.Type}@)">
            <summary>
            Remove duplicate types.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.ParseExpression``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Reflection.ConstructorInfo@)">
            <summary>
            Parse expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="constructorInfo"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.AddPropertyParameters(System.Linq.Expressions.MemberInitExpression,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Parse <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="memberInitExpression"></param>
            <param name="parameterBases"></param>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.AddConstructorParameters(System.Linq.Expressions.NewExpression,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Parse <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="newExpression"></param>
            <param name="parameterBases"></param>
        </member>
        <member name="P:MugenInjection.Infrastructure.InjectorUtilsInternal.SettingInjector">
            <summary>
            <see cref="T:MugenInjection.Interface.IInjector"/> contains global settings.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ManagedScope">
            <summary>
            Represents the managed scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IManagedScope">
            <summary>
            Represents the managed scope.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IManagedScope.AlwaysTryDisposeObject">
            <summary>
            Indicates that with the dispose of scope will try dispose all objects in scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ManagedScope"/> class.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ManagedScope.AlwaysTryDisposeObject">
            <summary>
            Indicates that with the dispose of scope will try dispose all objects in scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IParameterContext">
            <summary>
            Represent a parameter context.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IParameterContext.InjectedType">
            <summary>
            Gets the specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IParameterContext.Injector">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ParameterContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ParameterContext.InjectedType">
            <summary>
            Gets the specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ParameterContext.Injector">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.PriorityBinding">
            <summary>
            Binding priority enum.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.Standard">
            <summary>
            Standard priority.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.PriorityBinding.High">
            <summary>
            High prioriy.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="T:MugenInjection.Infrastructure.SpecialParameterKeys">
            <summary>
            Contain constant key for special parameter.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.NamedBindingParameter">
            <summary>
            Key for named binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.TryDisposeObjectSetting">
            <summary>
            Key try dispose object in bindings.
            </summary>
        </member>
        <member name="T:MugenInjection.InjectorExtensionUtils">
            <summary>
            Extension for <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector"></param>
            <param name="service"></param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters"></param>
            <param name="parameters"></param> 
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Get``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"> Type when injected specified service.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/>. </param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">The specified service type.</param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"> Type when injected specified service.</param>
            <param name="parameterInfo"> </param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">The specified service type.</param>
            <param name="member"> Type where injected specified service.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAll(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">The specified service type.</param>
            <param name="member">Type where injected specified service. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="all"> </param>
            <param name="parameters"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.GetAll(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/> (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="all"> </param>
            <param name="parameters"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind(MugenInjection.Interface.IInjector,System.Boolean,System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="service">The specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``1(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``2(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified services
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``3(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified services
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``4(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified services
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.BindTo``2(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind(MugenInjection.Interface.IInjector,System.Type)">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service types.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind``1(MugenInjection.Interface.IInjector)">
            <summary>
            Removes any existing bindings for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings for the specified service, with specific condition.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>. </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for resolve specified service. </param>
            <param name="findInParent">Find in parent bindings.</param>
            <param name="checkIsSelfBindable">Check current type for selfbindable. </param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Release specified service in scope.
            </summary>
            <param name="injector"> </param>
            <param name="service">Service for release.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameters">The specified binding parameters. </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.LoadModules(MugenInjection.Interface.IInjector,System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="injector"></param>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior">
            <summary>
            The behavior of the resolve for circular dependencies.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior.Resolve(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Resolves a circular dependencies.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="result">An instance of the service.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior">
            <summary>
            The behavior of the resolve for unregistered type.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior.Resolve(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Resolves a unregistered serivce.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="result">An instance of the service.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MugenInjection.Interface.IInjectionParameter">
            <summary>
            Represents the parameter for the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.GetValue(MugenInjection.Interface.IParameterContext)">
            <summary>
            Gets parameter value for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter value.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.Name">
            <summary>
            Gets the specified parameter name.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.ParameterType">
            <summary>
            Gets the specified parameter <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.MemberType">
            <summary>
            Gets the specified parameter <see cref="T:System.Reflection.MemberTypes"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IScopeLifecycleContext">
            <summary>
             Represents the context for scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IScopeLifecycleContext.ResolveCurrentService">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycleContext.Binding">
            <summary>
            Get the current <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycleContext.BindingContext">
            <summary>
            Gets the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.MugenInjector">
            <summary>
            The standard implementation of a <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainerContainer"> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Create new instance of <see cref="T:MugenInjection.MugenInjector"/>.
            </summary>
            <param name="injector">Parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainerContainer"> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s). Can be null.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.CreateChildInjector(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Core.InjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="T:MugenInjection.Parameters.ConstructorParameter`1">
            <summary>
            Represents the value of a constructor argument.
            </summary>
            <typeparam name="TType">The specified parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.ConstructorParameter">
            <summary>
            Represents the value of a constructor argument.
            </summary>
        </member>
        <member name="T:MugenInjection.Parameters.InjectionParameterBase">
            <summary>
            The base class for <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.Equals(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">The specified parameter type.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">The specified parameter type.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">The specified parameter type.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">The specified parameter type.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.#ctor(System.Reflection.MemberTypes,System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.InjectionParameterBase"/>.
            </summary>
            <param name="memberType">The specified parameter type.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.GetValue(MugenInjection.Interface.IParameterContext)">
            <summary>
            Gets parameter value for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter value.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameterBase.GetParameterValueInternal(MugenInjection.Interface.IParameterContext)">
            <summary>
            Gets parameter value for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter value.</returns>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.Value">
            <summary>
            Gets or sets the specified parameter value.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.ParameterDelegate">
            <summary>
            Gets or sets the specified delegate for create parameter value.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.Name">
            <summary>
            Gets the specified parameter name.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.ParameterType">
            <summary>
            Gets the specified parameter <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameterBase.MemberType">
            <summary>
            Gets the specified parameter <see cref="T:System.Reflection.MemberTypes"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="parameterDelegate">The specified parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter`1.#ctor(System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter`1.#ctor(System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.ConstructorParameter`1"/>.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="T:MugenInjection.Parameters.FieldParameter`1">
            <summary>
            Represents the value of a field parameter..
            </summary>
            <typeparam name="TType">The specified parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.FieldParameter">
            <summary>
            Represents the value of a field parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="type">The specified field type.</param>
            <param name="value">The specified field value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="type">The specified field type.</param>
            <param name="parameterDelegate">The specified parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Type,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="type">The specified field type.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified field delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="type">The specified field type.</param>
            <param name="parameterDelegate">The specified field delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter`1.#ctor(System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter`1"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter`1"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified field delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter`1.#ctor(System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter`1"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="value">The specified field value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.FieldParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.FieldParameter`1"/>.
            </summary>
            <param name="name">The specified field name.</param>
            <param name="parameterDelegate">The specified field delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="T:MugenInjection.Parameters.MethodParameter`1">
            <summary>
            Represents the value of a method parameter.
            </summary>
            <typeparam name="TType">Parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.MethodParameter">
            <summary>
            Represents the value of a method parameter.
            </summary>
        </member>
        <member name="F:MugenInjection.Parameters.MethodParameter._methodName">
            <summary>
            Method name.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="parameterDelegate">The specified parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="type">The specified parameter type.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.Equals(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter`1"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter`1.#ctor(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter`1"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter`1.#ctor(System.String,System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter`1"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter`1.#ctor(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{`0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.MethodParameter`1"/>.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified parameter delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="T:MugenInjection.Parameters.PropertyParameter`1">
            <summary>
            Represents the value of a property parameter.
            </summary>
            <typeparam name="TType">The specified parameter type.</typeparam>
        </member>
        <member name="T:MugenInjection.Parameters.PropertyParameter">
            <summary>
            Represents the value of a property parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="type">The specified property type.</param>
            <param name="value">The specified property value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">Parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="type">The specified property type.</param>
            <param name="parameterDelegate">The specified parameter delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="type">The specified property type.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified property delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="type">The specified property type.</param>
            <param name="parameterDelegate">The specified property delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter`1.#ctor(System.String,`0)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter`1"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter`1"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified property delegate-value.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter`1.#ctor(System.String,System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter`1"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter`1.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{`0},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Parameters.PropertyParameter`1"/>.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified property delegate.</param>
            <param name="canResolve">Checking the condition for parameter request.</param>
        </member>
        <member name="T:MugenInjection.Scope.CustomScopeLifecycle">
            <summary>
            Class for custom lifecycle.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.ScopeLifecycleBase">
            <summary>
            Base class for scope lifecycle.
            </summary>
        </member>
        <member name="F:MugenInjection.Scope.ScopeLifecycleBase.Context">
            <summary>
            Gest the current <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ResolveCurrentService">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.NeedDispose">
            <summary>
            Indicating that need dispose object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ReleaseObjects(System.Boolean)">
            <summary>
            Releases all objects in current scope.
            </summary>
            <param name="needDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.TryDispose(System.Object)">
            <summary>
            Trying dispose the specified object.
            </summary>
            <param name="obj">The specified object.</param>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.#ctor(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
            Create new instance of <see cref="T:MugenInjection.Scope.CustomScopeLifecycle"/>.
            </summary>
            <param name="customScopeDelegate"></param>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.DefaultScopeLifecycleContext">
            <summary>
            Represents the default <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.DefaultScopeLifecycleContext.#ctor(MugenInjection.Bindings.BindingBase)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Scope.DefaultScopeLifecycleContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.BindingBase">
            <summary>
            Gets or sets the <see cref="P:MugenInjection.Scope.DefaultScopeLifecycleContext.BindingBase"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.Binding">
            <summary>
            Get the current <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.BindingContext">
            <summary>
            Gets the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.LocalManagedScopeLifecycle">
            <summary>
            Class for local managed scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.LocalManagedScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.LocalManagedScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Releases all objects in current scope.
            </summary>
            <param name="needDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="T:MugenInjection.Scope.ManagedScopeLifecycle">
            <summary>
            Class for managed scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Releases all objects in current scope.
            </summary>
            <param name="needDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="T:MugenInjection.Scope.SingletonScopeLifecycle">
            <summary>
            Class for singleton scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Releases all objects in current scope.
            </summary>
            <param name="needDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="T:MugenInjection.Scope.ThreadScopeLifecycle">
            <summary>
            Class for thread scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Releases all objects in current scope.
            </summary>
            <param name="needDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="T:MugenInjection.Scope.TransientScopeLifecycle">
            <summary>
             Class for transient scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Scope.UnitOfWorkScopeLifecycle">
            <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means that each injector will contain one unit of service.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.GetObjectFromScope">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
            Releases all objects in current scope.
            </summary>
            <param name="needDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
    </members>
</doc>
